{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\jejuMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction JejuMap() {\n  _s();\n  // 컴포넌트 이름을 대문자로 변경\n  const [state, setState] = useState({\n    center: {\n      lat: 33.4998,\n      lng: 126.5312\n    },\n    errMsg: null,\n    isLoading: true\n  });\n\n  // useEffect(() => {\n  //     if (navigator.geolocation) {\n  //         navigator.geolocation.getCurrentPosition(\n  //             (position) => {\n  //                 console.log(\"현재 위치의 위도:\", position.coords.latitude);\n  //                 console.log(\"현재 위치의 경도:\", position.coords.longitude);\n  //                 setState((prev) => ({\n  //                     ...prev,\n  //                     center: {\n  //                         lat: position.coords.latitude,\n  //                         lng: position.coords.longitude,\n  //                     },\n  //                     isLoading: false,\n  //                 }))\n  //             },\n  //             (err) => {\n  //                 setState((prev) => ({\n  //                     ...prev,\n  //                     errMsg: err.message,\n  //                     isLoading: false,\n  //                 }))\n  //             }\n  //         )\n  //     } else {\n  //         setState((prev) => ({\n  //             ...prev,\n  //             errMsg: \"geolocation을 사용할수 없어요..\",\n  //             isLoading: false,\n  //         }))\n  //     }\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      center: state.center,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      level: 3,\n      children: !state.isLoading && /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: state.center,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"5px\",\n            color: \"#000\"\n          },\n          children: state.errMsg ? state.errMsg : \"내위치는 콘솔!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(JejuMap, \"8gi4VQS0NUnKXhbzFYMfeWHmg+k=\");\n_c = JejuMap;\nexport default JejuMap; // 컴포넌트 이름을 대문자로 변경\nvar _c;\n$RefreshReg$(_c, \"JejuMap\");","map":{"version":3,"names":["React","useState","useEffect","Map","MapMarker","jsxDEV","_jsxDEV","Fragment","_Fragment","JejuMap","_s","state","setState","center","lat","lng","errMsg","isLoading","children","style","width","height","level","position","padding","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/jejuMap.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\r\n\r\nfunction JejuMap() { // 컴포넌트 이름을 대문자로 변경\r\n    const [state, setState] = useState({\r\n        center: {\r\n            lat:33.4998,\r\n            lng:126.5312,\r\n\r\n        },\r\n        errMsg: null,\r\n        isLoading: true,\r\n    })\r\n\r\n    // useEffect(() => {\r\n    //     if (navigator.geolocation) {\r\n    //         navigator.geolocation.getCurrentPosition(\r\n    //             (position) => {\r\n    //                 console.log(\"현재 위치의 위도:\", position.coords.latitude);\r\n    //                 console.log(\"현재 위치의 경도:\", position.coords.longitude);\r\n    //                 setState((prev) => ({\r\n    //                     ...prev,\r\n    //                     center: {\r\n    //                         lat: position.coords.latitude,\r\n    //                         lng: position.coords.longitude,\r\n    //                     },\r\n    //                     isLoading: false,\r\n    //                 }))\r\n    //             },\r\n    //             (err) => {\r\n    //                 setState((prev) => ({\r\n    //                     ...prev,\r\n    //                     errMsg: err.message,\r\n    //                     isLoading: false,\r\n    //                 }))\r\n    //             }\r\n    //         )\r\n    //     } else {\r\n    //         setState((prev) => ({\r\n    //             ...prev,\r\n    //             errMsg: \"geolocation을 사용할수 없어요..\",\r\n    //             isLoading: false,\r\n    //         }))\r\n    //     }\r\n    // }, [])\r\n\r\n    return (\r\n        <>\r\n            <Map\r\n                center={state.center}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                }}\r\n                level={3}\r\n            >\r\n                {!state.isLoading && (\r\n                    <MapMarker position={state.center}>\r\n                        <div style={{ padding: \"5px\", color: \"#000\" }}>\r\n                            {state.errMsg ? state.errMsg : \"내위치는 콘솔!\"}\r\n                        </div>\r\n                    </MapMarker>\r\n                )}\r\n            </Map>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default JejuMap; // 컴포넌트 이름을 대문자로 변경\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,SAAS,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAAE;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC;IAC/BY,MAAM,EAAE;MACJC,GAAG,EAAC,OAAO;MACXC,GAAG,EAAC;IAER,CAAC;IACDC,MAAM,EAAE,IAAI;IACZC,SAAS,EAAE;EACf,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIX,OAAA,CAAAE,SAAA;IAAAU,QAAA,eACIZ,OAAA,CAACH,GAAG;MACAU,MAAM,EAAEF,KAAK,CAACE,MAAO;MACrBM,KAAK,EAAE;QACHC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE;MACZ,CAAE;MACFC,KAAK,EAAE,CAAE;MAAAJ,QAAA,EAER,CAACP,KAAK,CAACM,SAAS,iBACbX,OAAA,CAACF,SAAS;QAACmB,QAAQ,EAAEZ,KAAK,CAACE,MAAO;QAAAK,QAAA,eAC9BZ,OAAA;UAAKa,KAAK,EAAE;YAAEK,OAAO,EAAE,KAAK;YAAEC,KAAK,EAAE;UAAO,CAAE;UAAAP,QAAA,EACzCP,KAAK,CAACK,MAAM,GAAGL,KAAK,CAACK,MAAM,GAAG;QAAU;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IACd;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC,gBACR,CAAC;AAEX;AAACnB,EAAA,CA/DQD,OAAO;AAAAqB,EAAA,GAAPrB,OAAO;AAiEhB,eAAeA,OAAO,CAAC,CAAC;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}