{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\routes\\\\Chart\\\\Chart7.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Chart as ChartJS, LinearScale, CategoryScale, BarElement, PointElement, LineElement, Legend, Tooltip, LineController, BarController } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartLine() {\n  _s();\n  ChartJS.register(LinearScale, CategoryScale, BarElement, PointElement, LineElement, Legend, Tooltip, LineController, BarController);\n  const [oilData, setOilData] = useState({});\n  useEffect(() => {\n    axios.get('http://127.0.0.1:5000/api/avgRecentPrice').then(response => {\n      setOilData(response.data);\n    }).catch(error => {\n      console.error('Error fetching data: ', error);\n    });\n  }, []);\n  const formatChartData = oilData => {\n    if (!oilData || Object.keys(oilData).length === 0) {\n      return {\n        labels: [],\n        datasets: []\n      };\n    }\n    const oilNames = {\n      'B034': '고급휘발유',\n      'B027': '보통휘발유',\n      'D047': '자동차경유',\n      'C004': '실내등유'\n      // 'K015': '자동차부탄',\n    };\n    const excludedOilTypes = ['K015']; // 자동차부탄 제외\n    const formatDate = dateString => {\n      // const year = dateString.slice(0, 4);\n      const month = dateString.slice(4, 6);\n      const day = dateString.slice(6, 8);\n      return `${month}/${day}`;\n    };\n    const labels = oilData['B027'].map(item => formatDate(item.date));\n    const datasets = Object.keys(oilData).filter(oilType => !excludedOilTypes.includes(oilType)).map((label, index) => {\n      const data = oilData[label].map(item => item.price);\n      return {\n        type: 'line',\n        label: oilNames[label],\n        borderColor: 'rgb(255,176,176)',\n        data: data,\n        fill: false,\n        hidden: index !== 0\n      };\n    });\n    return {\n      labels: labels,\n      datasets: datasets\n    };\n  };\n  const chartData = formatChartData(oilData);\n  const legendTitle = {\n    display: true,\n    text: '7일간 유가 변동',\n    padding: 20,\n    font: {\n      size: 16,\n      weight: 'bold'\n    }\n  };\n  const options = {\n    plugins: {\n      legend: {\n        title: legendTitle\n      }\n    },\n    scales: {\n      'y': {\n        beginAtZero: false,\n        display: true,\n        position: 'left',\n        min: Math.min(...chartData.datasets.map(dataset => dataset.minValue)),\n        max: Math.max(...(chartData.datasets.map(dataset => dataset.maxValue) + 50)),\n        ticks: {\n          min: Math.min(...chartData.datasets.map(dataset => dataset.minValue)),\n          max: Math.max(...chartData.datasets.map(dataset => dataset.maxValue)) + 50,\n          stepSize: 1,\n          callback: function (value) {\n            return value + '원';\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '400px',\n      margin: 'auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      id: \"myChart\",\n      options: options,\n      width: 400,\n      height: 460\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartLine, \"hONjO0vMaAcWhbFabZOuIitC9ck=\");\n_c = ChartLine;\nexport default ChartLine;\nvar _c;\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","LinearScale","CategoryScale","BarElement","PointElement","LineElement","Legend","Tooltip","LineController","BarController","Bar","axios","jsxDEV","_jsxDEV","ChartLine","_s","register","oilData","setOilData","get","then","response","data","catch","error","console","formatChartData","Object","keys","length","labels","datasets","oilNames","excludedOilTypes","formatDate","dateString","month","slice","day","map","item","date","filter","oilType","includes","label","index","price","type","borderColor","fill","hidden","chartData","legendTitle","display","text","padding","font","size","weight","options","plugins","legend","title","scales","beginAtZero","position","min","Math","dataset","minValue","max","maxValue","ticks","stepSize","callback","value","style","width","maxWidth","margin","children","id","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/routes/Chart/Chart7.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport axios from \"axios\";\r\n\r\nfunction ChartLine() {\r\n    ChartJS.register(\r\n        LinearScale,\r\n        CategoryScale,\r\n        BarElement,\r\n        PointElement,\r\n        LineElement,\r\n        Legend,\r\n        Tooltip,\r\n        LineController,\r\n        BarController\r\n\r\n    );\r\n\r\n    const [oilData, setOilData] = useState({});\r\n\r\n    useEffect(() => {\r\n        axios.get('http://127.0.0.1:5000/api/avgRecentPrice')\r\n            .then(response => {\r\n                setOilData(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching data: ', error);\r\n            });\r\n    }, []);\r\n\r\n    const formatChartData = (oilData) => {\r\n\r\n        if (!oilData || Object.keys(oilData).length === 0) {\r\n            return {\r\n                labels: [],\r\n                datasets: [],\r\n            };\r\n        }\r\n        const oilNames = {\r\n            'B034': '고급휘발유',\r\n            'B027': '보통휘발유',\r\n            'D047': '자동차경유',\r\n            'C004': '실내등유',\r\n            // 'K015': '자동차부탄',\r\n        };\r\n        const excludedOilTypes = ['K015']; // 자동차부탄 제외\r\n        const formatDate = (dateString) => {\r\n            // const year = dateString.slice(0, 4);\r\n            const month = dateString.slice(4, 6);\r\n            const day = dateString.slice(6, 8);\r\n            return `${month}/${day}`;\r\n        };\r\n        const labels = oilData['B027'].map(item => formatDate(item.date));\r\n\r\n        const datasets = Object.keys(oilData)\r\n            .filter(oilType => !excludedOilTypes.includes(oilType))\r\n            .map((label,index) => {\r\n                const data = oilData[label].map(item => item.price);\r\n                return {\r\n                    type: 'line',\r\n                    label: oilNames[label],\r\n                    borderColor: 'rgb(255,176,176)',\r\n                    data: data,\r\n                    fill: false,\r\n                    hidden: index !== 0,\r\n\r\n                };\r\n            });\r\n\r\n        return {\r\n            labels: labels,\r\n            datasets: datasets,\r\n        };\r\n    };\r\n    const chartData = formatChartData(oilData);\r\n\r\n    const legendTitle = {\r\n        display: true,\r\n        text: '7일간 유가 변동',\r\n        padding: 20,\r\n        font: {\r\n            size: 16,\r\n            weight: 'bold',\r\n        }\r\n    };\r\n\r\n\r\n    const options = {\r\n\r\n        plugins: {\r\n            legend: {\r\n                title: legendTitle,\r\n            }\r\n        },\r\n        scales: {\r\n            'y': {\r\n                beginAtZero: false,\r\n                display: true,\r\n                position: 'left',\r\n                min: Math.min(...chartData.datasets.map(dataset => dataset.minValue)),\r\n                max: Math.max(...chartData.datasets.map(dataset => dataset.maxValue)+50),\r\n                ticks: {\r\n                    min: Math.min(...chartData.datasets.map(dataset => dataset.minValue)),\r\n                    max: Math.max(...chartData.datasets.map(dataset => dataset.maxValue)) + 50,\r\n                    stepSize: 1,\r\n                    callback: function (value) {\r\n                        return value + '원';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n\r\n        <div style={{width: '100%', maxWidth: '400px', margin: 'auto'}}>\r\n\r\n            <Bar data={chartData} id=\"myChart\" options={options} width={400} height={460}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartLine;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}