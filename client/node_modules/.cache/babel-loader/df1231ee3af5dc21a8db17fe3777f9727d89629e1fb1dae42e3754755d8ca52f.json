{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\jejuMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction JejuMap() {\n  _s();\n  // 컴포넌트 이름을 대문자로 변경\n  const [position, setPosition] = useState({\n    lat: 33.4,\n    lng: 126.55\n  });\n  const [zoomLevel, setZoomLevel] = useState(7);\n  // const [state, setState] = useState(\n  //\n  //     {\n  //     center: {\n  //         lat:33.4998,\n  //         lng:126.5312,\n  //\n  //     },\n  //     errMsg: null,\n  //     isLoading: true,\n  // })\n\n  // useEffect(() => {\n  //     if (navigator.geolocation) {\n  //         navigator.geolocation.getCurrentPosition(\n  //             (position) => {\n  //                 console.log(\"현재 위치의 위도:\", position.coords.latitude);\n  //                 console.log(\"현재 위치의 경도:\", position.coords.longitude);\n  //                 setState((prev) => ({\n  //                     ...prev,\n  //                     center: {\n  //                         lat: position.coords.latitude,\n  //                         lng: position.coords.longitude,\n  //                     },\n  //                     isLoading: false,\n  //                 }))\n  //             },\n  //             (err) => {\n  //                 setState((prev) => ({\n  //                     ...prev,\n  //                     errMsg: err.message,\n  //                     isLoading: false,\n  //                 }))\n  //             }\n  //         )\n  //     } else {\n  //         setState((prev) => ({\n  //             ...prev,\n  //             errMsg: \"geolocation을 사용할수 없어요..\",\n  //             isLoading: false,\n  //         }))\n  //     }\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      center: position,\n      level: zoomLevel,\n      style: {\n        width: \"100%\",\n        height: \"900px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(JejuMap, \"EUJLcbbOjwYONBUXWcNOxAJb+W8=\");\n_c = JejuMap;\nexport default JejuMap; // 컴포넌트 이름을 대문자로 변경\nvar _c;\n$RefreshReg$(_c, \"JejuMap\");","map":{"version":3,"names":["React","useState","useEffect","Map","MapMarker","jsxDEV","_jsxDEV","Fragment","_Fragment","JejuMap","_s","position","setPosition","lat","lng","zoomLevel","setZoomLevel","children","center","level","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/jejuMap.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\r\n\r\nfunction JejuMap() { // 컴포넌트 이름을 대문자로 변경\r\n    const [position, setPosition] = useState({ lat:33.4, lng: 126.55});\r\n    const [zoomLevel, setZoomLevel] = useState(7);\r\n    // const [state, setState] = useState(\r\n    //\r\n    //     {\r\n    //     center: {\r\n    //         lat:33.4998,\r\n    //         lng:126.5312,\r\n    //\r\n    //     },\r\n    //     errMsg: null,\r\n    //     isLoading: true,\r\n    // })\r\n\r\n    // useEffect(() => {\r\n    //     if (navigator.geolocation) {\r\n    //         navigator.geolocation.getCurrentPosition(\r\n    //             (position) => {\r\n    //                 console.log(\"현재 위치의 위도:\", position.coords.latitude);\r\n    //                 console.log(\"현재 위치의 경도:\", position.coords.longitude);\r\n    //                 setState((prev) => ({\r\n    //                     ...prev,\r\n    //                     center: {\r\n    //                         lat: position.coords.latitude,\r\n    //                         lng: position.coords.longitude,\r\n    //                     },\r\n    //                     isLoading: false,\r\n    //                 }))\r\n    //             },\r\n    //             (err) => {\r\n    //                 setState((prev) => ({\r\n    //                     ...prev,\r\n    //                     errMsg: err.message,\r\n    //                     isLoading: false,\r\n    //                 }))\r\n    //             }\r\n    //         )\r\n    //     } else {\r\n    //         setState((prev) => ({\r\n    //             ...prev,\r\n    //             errMsg: \"geolocation을 사용할수 없어요..\",\r\n    //             isLoading: false,\r\n    //         }))\r\n    //     }\r\n    // }, [])\r\n\r\n    return (\r\n        <>\r\n            <Map center={position} level={zoomLevel} style={{ width: \"100%\", height: \"900px\" }}>\r\n            </Map>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default JejuMap; // 컴포넌트 이름을 대문자로 변경\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,SAAS,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAAE;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC;IAAEY,GAAG,EAAC,IAAI;IAAEC,GAAG,EAAE;EAAM,CAAC,CAAC;EAClE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIK,OAAA,CAAAE,SAAA;IAAAS,QAAA,eACIX,OAAA,CAACH,GAAG;MAACe,MAAM,EAAEP,QAAS;MAACQ,KAAK,EAAEJ,SAAU;MAACK,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E;EAAC,gBACR,CAAC;AAEX;AAAChB,EAAA,CArDQD,OAAO;AAAAkB,EAAA,GAAPlB,OAAO;AAuDhB,eAAeA,OAAO,CAAC,CAAC;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}