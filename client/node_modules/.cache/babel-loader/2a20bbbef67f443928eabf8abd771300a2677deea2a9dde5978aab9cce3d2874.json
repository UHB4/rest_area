{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\my_location.js\",\n  _s = $RefreshSig$();\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction My_location() {\n  _s();\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(\"현재 위치의 위도:\", position.coords.latitude);\n        console.log(\"현재 위치의 경도:\", position.coords.longitude);\n        setState(prev => ({\n          ...prev,\n          center: {\n            lat: position.coords.latitude,\n            // 위도\n            lng: position.coords.longitude // 경도\n          },\n          isLoading: false\n        }));\n      }, err => {\n        setState(prev => ({\n          ...prev,\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState(prev => ({\n        ...prev,\n        errMsg: \"geolocation을 사용할수 없어요..\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: state.center,\n      style: {\n        // 지도의 크기\n        width: \"100%\",\n        height: \"100%\"\n      },\n      level: 3 // 지도의 확대 레벨\n      ,\n      children: !state.isLoading && /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: state.center,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"5px\",\n            color: \"#000\"\n          },\n          children: state.errMsg ? state.errMsg : \"내위치는 콘솔!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(My_location, \"8ZOzZkjta0sBsgC5joFrKE81Lc8=\");\n_c = My_location;\nexport default My_location;\nvar _c;\n$RefreshReg$(_c, \"My_location\");","map":{"version":3,"names":["Map","MapMarker","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","My_location","_s","state","setState","center","lat","lng","errMsg","isLoading","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","prev","err","message","children","style","width","height","level","padding","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/my_location.js"],"sourcesContent":["\r\nimport {Map, MapMarker} from \"react-kakao-maps-sdk\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\n\r\n\r\nfunction My_location() {\r\n    const [state, setState] = useState({\r\n        center: {\r\n            lat: 33.450701,\r\n            lng: 126.570667,\r\n        },\r\n        errMsg: null,\r\n        isLoading: true,\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            // GeoLocation을 이용해서 접속 위치를 얻어옵니다\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    console.log(\"현재 위치의 위도:\", position.coords.latitude);\r\n                    console.log(\"현재 위치의 경도:\", position.coords.longitude);\r\n                    setState((prev) => ({\r\n                        ...prev,\r\n                        center: {\r\n                            lat: position.coords.latitude, // 위도\r\n                            lng: position.coords.longitude, // 경도\r\n                        },\r\n                        isLoading: false,\r\n                    }))\r\n                },\r\n                (err) => {\r\n                    setState((prev) => ({\r\n                        ...prev,\r\n                        errMsg: err.message,\r\n                        isLoading: false,\r\n                    }))\r\n                }\r\n            )\r\n        } else {\r\n            // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\r\n            setState((prev) => ({\r\n                ...prev,\r\n                errMsg: \"geolocation을 사용할수 없어요..\",\r\n                isLoading: false,\r\n            }))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Map // 지도를 표시할 Container\r\n                center={state.center}\r\n                style={{\r\n                    // 지도의 크기\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                }}\r\n                level={3} // 지도의 확대 레벨\r\n            >\r\n                {!state.isLoading && (\r\n                    <MapMarker position={state.center}>\r\n                        <div style={{ padding: \"5px\", color: \"#000\" }}>\r\n                            {state.errMsg ? state.errMsg : \"내위치는 콘솔!\"}\r\n                        </div>\r\n                    </MapMarker>\r\n                )}\r\n            </Map>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default My_location;"],"mappings":";;AACA,SAAQA,GAAG,EAAEC,SAAS,QAAO,sBAAsB;AACnD,SAAQC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAI1C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC;IAC/BS,MAAM,EAAE;MACJC,GAAG,EAAE,SAAS;MACdC,GAAG,EAAE;IACT,CAAC;IACDC,MAAM,EAAE,IAAI;IACZC,SAAS,EAAE;EACf,CAAC,CAAC;EAGFd,SAAS,CAAC,MAAM;IACZ,IAAIe,SAAS,CAACC,WAAW,EAAE;MACvB;MACAD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACnCC,QAAQ,IAAK;QACVC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,QAAQ,CAACG,MAAM,CAACC,QAAQ,CAAC;QACnDH,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,QAAQ,CAACG,MAAM,CAACE,SAAS,CAAC;QACpDd,QAAQ,CAAEe,IAAI,KAAM;UAChB,GAAGA,IAAI;UACPd,MAAM,EAAE;YACJC,GAAG,EAAEO,QAAQ,CAACG,MAAM,CAACC,QAAQ;YAAE;YAC/BV,GAAG,EAAEM,QAAQ,CAACG,MAAM,CAACE,SAAS,CAAE;UACpC,CAAC;UACDT,SAAS,EAAE;QACf,CAAC,CAAC,CAAC;MACP,CAAC,EACAW,GAAG,IAAK;QACLhB,QAAQ,CAAEe,IAAI,KAAM;UAChB,GAAGA,IAAI;UACPX,MAAM,EAAEY,GAAG,CAACC,OAAO;UACnBZ,SAAS,EAAE;QACf,CAAC,CAAC,CAAC;MACP,CACJ,CAAC;IACL,CAAC,MAAM;MACH;MACAL,QAAQ,CAAEe,IAAI,KAAM;QAChB,GAAGA,IAAI;QACPX,MAAM,EAAE,yBAAyB;QACjCC,SAAS,EAAE;MACf,CAAC,CAAC,CAAC;IACP;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIX,OAAA,CAAAE,SAAA;IAAAsB,QAAA,eACIxB,OAAA,CAACL,GAAG,CAAC;IAAA;MACDY,MAAM,EAAEF,KAAK,CAACE,MAAO;MACrBkB,KAAK,EAAE;QACH;QACAC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE;MACZ,CAAE;MACFC,KAAK,EAAE,CAAE,CAAC;MAAA;MAAAJ,QAAA,EAET,CAACnB,KAAK,CAACM,SAAS,iBACbX,OAAA,CAACJ,SAAS;QAACmB,QAAQ,EAAEV,KAAK,CAACE,MAAO;QAAAiB,QAAA,eAC9BxB,OAAA;UAAKyB,KAAK,EAAE;YAAEI,OAAO,EAAE,KAAK;YAAEC,KAAK,EAAE;UAAO,CAAE;UAAAN,QAAA,EACzCnB,KAAK,CAACK,MAAM,GAAGL,KAAK,CAACK,MAAM,GAAG;QAAU;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IACd;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC,gBACR,CAAC;AAEX;AAAC9B,EAAA,CAlEQD,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AAoEpB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}