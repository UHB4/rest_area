{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\routes\\\\NearbyGasChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NearbyGasChart() {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [locationData, setLocationData] = useState(null);\n\n  // 위치 정보를 가져오고 데이터를 로드하는 함수\n  const fetchLocationAndData = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      axios.post('http://localhost:5000/api/gas-stations', {\n        latitude,\n        longitude\n      }).then(response => {\n        setLocationData(response.data);\n        console.log('넘어온 데이터:', response.data);\n      }).catch(error => {\n        console.error('데이터 에러:', error);\n      });\n    }, error => {\n      console.error('Error getting location:', error);\n    });\n  };\n  ChartJS.register(ArcElement, Tooltip, Legend);\n  let labels = [];\n  if (stations.length > 0) {\n    labels = stations.map(station => station.name);\n  }\n  // console.log(labels)\n  let price = [];\n  if (stations.length > 0) {\n    price = stations.map(station => station.price);\n  }\n  // console.log(price)\n  const combinedData = labels.map((label, index) => `${label} : ${price[index]}`);\n  // const maxDataValue = 15; // 최대 데이터 값\n  const chartData = {\n    labels: combinedData,\n    datasets: [{\n      label: '가격',\n      data: price.map(price => parseInt(price)),\n      // 가격 데이터를 사용하여 데이터 생성\n      backgroundColor: labels.map((_, index) => `hsl(${60 + index * 10}, 80%, ${65 - index * 3}%)`),\n      borderColor: Array.from({\n        length: labels.length\n      }, () => 'green'),\n      borderWidth: 1\n    }]\n  };\n  const legendTitle = {\n    display: true,\n    text: '내 주변 주유소 가격비교',\n    padding: 20,\n    // 제목과 범례 사이의 간격 조절\n    font: {\n      size: 16,\n      // 폰트 크기 설정\n      weight: 'bold' // 폰트 굵기 설정\n    }\n  };\n  const options = {\n    plugins: {\n      legend: {\n        position: 'top',\n        title: legendTitle // 범례 제목 적용\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          maxWidth: '400px',\n          margin: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: chartData,\n          options: options,\n          width: 400,\n          height: 460\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(NearbyGasChart, \"3X951+ZGoRbL/A9hEn7t/iYkyUg=\");\n_c = NearbyGasChart;\nexport default NearbyGasChart;\nvar _c;\n$RefreshReg$(_c, \"NearbyGasChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","NearbyGasChart","_s","stations","setStations","locationData","setLocationData","fetchLocationAndData","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","post","then","response","data","console","log","catch","error","register","labels","length","map","station","name","price","combinedData","label","index","chartData","datasets","parseInt","backgroundColor","_","borderColor","Array","from","borderWidth","legendTitle","display","text","padding","font","size","weight","options","plugins","legend","title","className","children","style","width","maxWidth","margin","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/routes/NearbyGasChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nfunction NearbyGasChart() {\r\n  const [stations, setStations] = useState([]);\r\n  const [locationData, setLocationData] = useState(null);\r\n\r\n    // 위치 정보를 가져오고 데이터를 로드하는 함수\r\n    const fetchLocationAndData = () => {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const { latitude, longitude } = position.coords;\r\n            axios.post('http://localhost:5000/api/gas-stations', {\r\n                latitude,\r\n                longitude\r\n            })\r\n                .then(response => {\r\n                    setLocationData(response.data);\r\n                    console.log('넘어온 데이터:', response.data);\r\n                })\r\n                .catch(error => {\r\n                    console.error('데이터 에러:', error);\r\n                });\r\n        }, error => {\r\n            console.error('Error getting location:', error);\r\n        });\r\n    };\r\n    ChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\n    let labels = [];\r\n    if (stations.length > 0) {\r\n        labels = stations.map((station) => station.name);\r\n    }\r\n    // console.log(labels)\r\n    let price = [];\r\n    if (stations.length > 0) {\r\n        price = stations.map((station) => station.price);\r\n    }\r\n    // console.log(price)\r\n    const combinedData = labels.map((label, index) => (`${label} : ${price[index]}`));\r\n    // const maxDataValue = 15; // 최대 데이터 값\r\n    const chartData = {\r\n\r\n        labels: combinedData,\r\n        datasets: [\r\n            {\r\n                label: '가격',\r\n                data: price.map((price) => parseInt(price)), // 가격 데이터를 사용하여 데이터 생성\r\n                backgroundColor: labels.map((_, index) => `hsl(${60 + index * 10}, 80%, ${65 - index * 3}%)`),\r\n                borderColor: Array.from({ length: labels.length }, () => 'green'),\r\n                borderWidth: 1,\r\n            }\r\n        ]\r\n    };\r\n    const legendTitle = {\r\n        display: true,\r\n        text: '내 주변 주유소 가격비교',\r\n        padding: 20, // 제목과 범례 사이의 간격 조절\r\n        font: {\r\n            size: 16, // 폰트 크기 설정\r\n            weight: 'bold', // 폰트 굵기 설정\r\n        }\r\n    };\r\n\r\n    const options = {\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n                title: legendTitle // 범례 제목 적용\r\n            },\r\n        },\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"App\">\r\n                <div style={{width: '100%', maxWidth: '400px', margin: 'auto'}}>\r\n                    <Doughnut data={chartData} options={options} width={400} height={460} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NearbyGasChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}