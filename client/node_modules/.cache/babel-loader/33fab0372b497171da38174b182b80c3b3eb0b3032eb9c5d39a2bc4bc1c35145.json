{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\client\\\\src\\\\routes\\\\Chart\\\\EVChargingSlots.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ArcElement, Chart as ChartJS, Legend, Tooltip } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { useNavigate } from 'react-router-dom';\nimport styles from './Chart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationTracker = () => {\n  _s();\n  const [stations, setStations] = useState([]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      axios.post('http://localhost:5000/location', {\n        latitude,\n        longitude\n      }).then(response => {\n        setStations(response.data.stations); // 충전소 정보 상태 업데이트\n      }).catch(error => {\n        console.error('에러 :', error);\n      });\n    }, error => {\n      console.error(error.message);\n    }, {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ChartDonut, {\n    stations: stations.map(station => station[\"Station Name\"])\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(LocationTracker, \"KV8CcP3gcIUxQ2C9moSCRW/KKrI=\");\n_c = LocationTracker;\nfunction ChartDonut(props) {\n  _s2();\n  const {\n    stations\n  } = props;\n  ChartJS.register(ArcElement, Tooltip, Legend);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: '충전 가능 슬롯 수',\n      data: [],\n      backgroundColor: [],\n      borderWidth: 1,\n      borderColor: []\n    }]\n  });\n  useEffect(() => {\n    let labels = stations;\n    const EmptyParkingLot = labels.map(() => Math.floor(Math.random() * 3));\n    const backgroundColors = labels.map((_, index) => `hsl(${200 + index * 30}, 90%, ${90 - index * 5}%)`);\n    const borderColors = labels.map((_, index) => `hsl(${200 + index * 30}, 100%, ${80 - index * 5}%)`); // 채도와 밝기를 조금 조정\n\n    setChartData({\n      labels: labels,\n      datasets: [{\n        data: EmptyParkingLot,\n        backgroundColor: backgroundColors,\n        borderColor: borderColors\n      }]\n    });\n  }, [stations]);\n  const legendTitle = {\n    display: true,\n    text: '내 주변 전기차 충전 가능 한 곳',\n    font: {\n      size: 16,\n      // 폰트 크기 설정\n      weight: 'bold' // 폰트 굵기 설정\n    }\n  };\n  const navigate = useNavigate();\n  const handleChartClick = (event, elements) => {\n    if (!elements || elements.length === 0) {\n      return;\n    }\n    if (elements.length > 0) {\n      // const clickedElementIndex = elements[0]._index;\n      // const clickedData = chartData.labels[clickedElementIndex];\n      navigate(`/map`);\n    }\n  };\n  const options = {\n    plugins: {\n      tooltip: {\n        enabled: true,\n        bodyFont: {\n          size: 15\n        },\n        callbacks: {\n          beforeBody: function () {\n            return '빈 슬롯 수'; // 툴팁 본문 전에 표시될 텍스트\n          }\n        }\n      },\n      // labels:{   padding: 20},\n      legend: {\n        position: 'top',\n        title: legendTitle // 범례 제목 적용\n      }\n    },\n    onClick: handleChartClick\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setChartData(prevChartData => {\n        const newData = prevChartData.datasets[0].data.map(value => {\n          // 이전 데이터 값에 약간의 변화를 줌 (-2부터 2까지 랜덤한 값)\n          let newValue = value + Math.floor(Math.random() * 5) - 2; // -2, -1, 0, 1, 2 중에서 랜덤으로 선택\n          newValue = Math.min(Math.max(newValue, 0), 7); // 값이 0보다 작으면 0으로, 10보다 크면 10으로 설정\n          return newValue;\n        });\n        return {\n          ...prevChartData,\n          datasets: [{\n            ...prevChartData.datasets[0],\n            data: newData\n          }]\n        };\n      });\n    }, 10000);\n    return () => clearInterval(interval); // 컴포넌트가 소멸될 때 해당 인터벌을 정리\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.Chart,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        maxWidth: '400px',\n        margin: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Doughnut, {\n        data: chartData,\n        options: options,\n        width: 400,\n        height: 460\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n}\n_s2(ChartDonut, \"clcUb6GToHlDXiyvO5LMYv/sohU=\", false, function () {\n  return [useNavigate];\n});\n_c2 = ChartDonut;\nexport default LocationTracker;\nvar _c, _c2;\n$RefreshReg$(_c, \"LocationTracker\");\n$RefreshReg$(_c2, \"ChartDonut\");","map":{"version":3,"names":["React","useState","useEffect","axios","ArcElement","Chart","ChartJS","Legend","Tooltip","Doughnut","useNavigate","styles","jsxDEV","_jsxDEV","LocationTracker","_s","stations","setStations","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","post","then","response","data","catch","error","console","message","enableHighAccuracy","timeout","maximumAge","ChartDonut","map","station","fileName","_jsxFileName","lineNumber","columnNumber","_c","props","_s2","register","chartData","setChartData","labels","datasets","label","backgroundColor","borderWidth","borderColor","EmptyParkingLot","Math","floor","random","backgroundColors","_","index","borderColors","legendTitle","display","text","font","size","weight","navigate","handleChartClick","event","elements","length","options","plugins","tooltip","enabled","bodyFont","callbacks","beforeBody","legend","title","onClick","interval","setInterval","prevChartData","newData","value","newValue","min","max","clearInterval","className","children","style","width","maxWidth","margin","height","_c2","$RefreshReg$"],"sources":["C:/UHB/rest_area/client/src/routes/Chart/EVChargingSlots.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ArcElement, Chart as ChartJS, Legend, Tooltip } from \"chart.js\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styles from './Chart.css'\r\nconst LocationTracker = () => {\r\n    const [stations, setStations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const { latitude, longitude } = position.coords;\r\n            axios.post('http://localhost:5000/location', { latitude, longitude })\r\n                .then(response => {\r\n                    setStations(response.data.stations); // 충전소 정보 상태 업데이트\r\n                })\r\n                .catch(error => {\r\n                    console.error('에러 :', error);\r\n                });\r\n        }, error => {\r\n            console.error(error.message);\r\n        }, {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <ChartDonut stations={stations.map(station => station[\"Station Name\"])} />\r\n    );\r\n};\r\n\r\nfunction ChartDonut(props) {\r\n    const { stations } = props;\r\n\r\n    ChartJS.register(ArcElement, Tooltip, Legend);\r\n    const [chartData, setChartData] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: '충전 가능 슬롯 수',\r\n                data: [],\r\n                backgroundColor: [],\r\n                borderWidth: 1,\r\n                borderColor: []\r\n            }\r\n        ],\r\n    });\r\n\r\n    useEffect(() => {\r\n        let labels = stations;\r\n        const EmptyParkingLot = labels.map(() => Math.floor(Math.random() * 3));\r\n        const backgroundColors = labels.map((_, index) => `hsl(${200 + index * 30}, 90%, ${90 - index * 5}%)`);\r\n        const borderColors = labels.map((_, index) => `hsl(${200 + index * 30}, 100%, ${80 - index * 5}%)`); // 채도와 밝기를 조금 조정\r\n\r\n\r\n        setChartData({\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    data: EmptyParkingLot,\r\n                    backgroundColor: backgroundColors,\r\n                    borderColor:borderColors,\r\n                }\r\n            ],\r\n        });\r\n    }, [stations]);\r\n\r\n    const legendTitle = {\r\n        display: true,\r\n        text: '내 주변 전기차 충전 가능 한 곳',\r\n        font: {\r\n            size: 16, // 폰트 크기 설정\r\n            weight: 'bold', // 폰트 굵기 설정\r\n        }\r\n\r\n    };\r\n    const navigate = useNavigate();\r\n    const handleChartClick = (event, elements) => {\r\n        if (!elements || elements.length === 0) {\r\n            return;\r\n        }\r\n        if (elements.length > 0) {\r\n            // const clickedElementIndex = elements[0]._index;\r\n            // const clickedData = chartData.labels[clickedElementIndex];\r\n            navigate(`/map`);\r\n        }\r\n    };\r\n    const options = {\r\n        plugins: {\r\n            tooltip: {\r\n                enabled: true,\r\n                bodyFont: {\r\n                    size: 15,\r\n                },\r\n                callbacks: {\r\n                    beforeBody: function() {\r\n                        return '빈 슬롯 수'; // 툴팁 본문 전에 표시될 텍스트\r\n                    }\r\n                }\r\n            },\r\n            // labels:{   padding: 20},\r\n            legend: {\r\n\r\n                position: 'top',\r\n                title: legendTitle // 범례 제목 적용\r\n            },\r\n        },\r\n        onClick: handleChartClick\r\n    };\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setChartData((prevChartData) => {\r\n                const newData = prevChartData.datasets[0].data.map((value) => {\r\n                    // 이전 데이터 값에 약간의 변화를 줌 (-2부터 2까지 랜덤한 값)\r\n                    let newValue = value + Math.floor(Math.random() * 5) - 2; // -2, -1, 0, 1, 2 중에서 랜덤으로 선택\r\n                    newValue = Math.min(Math.max(newValue, 0), 7); // 값이 0보다 작으면 0으로, 10보다 크면 10으로 설정\r\n                    return newValue;\r\n                });\r\n                return {\r\n                    ...prevChartData,\r\n                    datasets: [\r\n                        {\r\n                            ...prevChartData.datasets[0],\r\n                            data: newData,\r\n                        }\r\n                    ]\r\n                };\r\n            });\r\n        }, 10000);\r\n\r\n        return () => clearInterval(interval); // 컴포넌트가 소멸될 때 해당 인터벌을 정리\r\n    }, []);\r\n    return (\r\n        <div className={styles.Chart}>\r\n            <div style={{width: '100%', maxWidth: '400px', margin: 'auto'}}>\r\n                <Doughnut data={chartData} options={options} width={400} height={460}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LocationTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}