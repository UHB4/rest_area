{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\routes\\\\Chart\\\\NationalGasPricesChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, LinearScale, CategoryScale, BarElement, Legend, Tooltip, BarController } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport styles from './Chart.css';\n// 전역 폰트 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.defaults.font.family = 'GmarketSans';\nChartJS.defaults.font.size = 14;\nChartJS.defaults.font.style = 'normal';\nfunction App() {\n  _s();\n  ChartJS.register(LinearScale, CategoryScale, BarElement, Legend, Tooltip, BarController);\n  const [stations, setStations] = useState([]);\n  useEffect(() => {\n    axios.get('http://127.0.0.1:5000/api/avgAllPrice').then(response => {\n      setStations(response.data);\n    }).catch(error => {\n      console.error('Error fetching data: ', error);\n    });\n  }, []);\n  const labels = stations.map(station => station.name);\n  const price = stations.map(station => station.price);\n  const chartdata = {\n    labels,\n    datasets: [{\n      type: 'bar',\n      label: '실시간 전국 평균 유가',\n      backgroundColor: 'rgb(174,178,217)',\n      data: price.map(price => parseInt(price, 10)),\n      borderColor: 'white',\n      borderWidth: 2,\n      yAxisID: 'y',\n      barPercentage: 0.7\n    }]\n  };\n  const options = {\n    plugins: {\n      legend: {\n        display: true,\n        labels: {\n          font: {\n            size: 16,\n            weight: 'bold'\n          }\n        }\n      },\n      tooltip: {\n        bodyFont: {\n          size: 15\n        },\n        callbacks: {\n          title: function () {\n            return ''; // 타이틀을 비우거나 비활성화\n          },\n          label: function (context) {\n            return `${context.label.split(\" : \")[0]}: ${context.parsed.y}원`;\n            // return `${context.parsed.y}원`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          font: {\n            weight: 'bold',\n            size: 15\n          }\n        }\n      },\n      'y': {\n        display: true,\n        position: 'left',\n        min: 900,\n        max: 2000,\n        ticks: {\n          stepSize: 20,\n          color: '#333',\n          font: {\n            size: 15\n          }\n        },\n        grid: {\n          color: '#e5e5e5',\n          borderDash: [5, 5],\n          drawBorder: false\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.Chart,\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartdata,\n      options: options,\n      width: 600,\n      height: 460\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KV8CcP3gcIUxQ2C9moSCRW/KKrI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","LinearScale","CategoryScale","BarElement","Legend","Tooltip","BarController","Bar","axios","styles","jsxDEV","_jsxDEV","defaults","font","family","size","style","App","_s","register","stations","setStations","get","then","response","data","catch","error","console","labels","map","station","name","price","chartdata","datasets","type","label","backgroundColor","parseInt","borderColor","borderWidth","yAxisID","barPercentage","options","plugins","legend","display","weight","tooltip","bodyFont","callbacks","title","context","split","parsed","y","scales","x","ticks","position","min","max","stepSize","color","grid","borderDash","drawBorder","className","children","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/routes/Chart/NationalGasPricesChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    Legend,\r\n    Tooltip,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport styles from './Chart.css'\r\n// 전역 폰트 설정\r\nChartJS.defaults.font.family = 'GmarketSans';\r\nChartJS.defaults.font.size = 14;\r\nChartJS.defaults.font.style = 'normal';\r\n\r\nfunction App() {\r\n    ChartJS.register(\r\n        LinearScale,\r\n        CategoryScale,\r\n        BarElement,\r\n        Legend,\r\n        Tooltip,\r\n        BarController\r\n    );\r\n\r\n    const [stations, setStations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://127.0.0.1:5000/api/avgAllPrice')\r\n            .then(response => {\r\n                setStations(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching data: ', error);\r\n            })\r\n    }, []);\r\n\r\n    const labels = stations.map(station => station.name);\r\n    const price = stations.map(station => station.price);\r\n\r\n    const chartdata = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                type: 'bar',\r\n                label: '실시간 전국 평균 유가',\r\n                backgroundColor: 'rgb(174,178,217)',\r\n                data: price.map(price => parseInt(price, 10)),\r\n                borderColor: 'white',\r\n                borderWidth: 2,\r\n                yAxisID: 'y',\r\n                barPercentage: 0.7\r\n            }\r\n        ]\r\n    };\r\n\r\n    const options = {\r\n        plugins: {\r\n            legend: {\r\n                display: true,\r\n                labels: {\r\n                    font: {\r\n                        size: 16,\r\n                        weight: 'bold',\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                bodyFont: {\r\n                    size: 15,\r\n                },\r\n                callbacks: {\r\n                    title: function () {\r\n                        return ''; // 타이틀을 비우거나 비활성화\r\n                    },\r\n                    label: function (context) {\r\n                        return `${context.label.split(\" : \")[0]}: ${context.parsed.y}원`;\r\n                        // return `${context.parsed.y}원`;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        scales: {\r\n            x: {\r\n                ticks: {\r\n                    font: {\r\n                        weight: 'bold',\r\n                        size: 15,\r\n                    }\r\n                }\r\n            },\r\n            'y': {\r\n                display: true,\r\n                position: 'left',\r\n                min: 900,\r\n                max: 2000,\r\n                ticks: {\r\n                    stepSize: 20,\r\n                    color: '#333',\r\n                    font: {\r\n                        size: 15,\r\n                    }\r\n                },\r\n                grid: {\r\n                    color: '#e5e5e5',\r\n                    borderDash: [5, 5],\r\n                    drawBorder: false,\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return(\r\n    <div className={styles.Chart}>\r\n        <Bar data={chartdata} options={options} width={600} height={460}/>\r\n    </div>);\r\n\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}