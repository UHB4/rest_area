{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\gas_station.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\"; // MapInfoWindow를 사용하지 않으므로 제거\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GasStation({\n  radius,\n  stations\n}) {\n  _s();\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    errMsg: null,\n    isLoading: true,\n    selectedStation: null\n  });\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setState(prev => ({\n        ...prev,\n        center: {\n          lat: latitude,\n          lng: longitude\n        },\n        isLoading: false\n      }));\n    }, err => {\n      setState(prev => ({\n        ...prev,\n        errMsg: err.message,\n        isLoading: false\n      }));\n    });\n  }, []);\n\n  // 지도상에서 주유소 마커를 클릭했을 때 호출될 함수\n  const onMarkerClick = station => {\n    setState(prev => ({\n      ...prev,\n      selectedStation: station\n    }));\n  };\n\n  // 팝업을 닫는 함수\n  const closeInfoWindow = () => {\n    setState(prev => ({\n      ...prev,\n      selectedStation: null\n    }));\n  };\n\n  // radius와 stations props를 기반으로 지도에 표시할 주유소를 필터링합니다.\n  const filteredStations = stations.filter(station => station.distance <= radius);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Map, {\n      center: state.center,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      level: 3,\n      children: !state.isLoading && filteredStations.map(station => /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: {\n          lat: station.latitude,\n          lng: station.longitude\n        },\n        image: {\n          src: \"img/fuel.png\",\n          // 실제 마커 이미지 경로로 대체\n          size: {\n            width: 24,\n            height: 35\n          }\n        },\n        onClick: () => onMarkerClick(station)\n      }, station.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), state.selectedStation && /*#__PURE__*/_jsxDEV(Popup, {\n      station: state.selectedStation,\n      onClose: closeInfoWindow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(GasStation, \"xfQBY0c2J+KGk2+Ra4axjjxdlxE=\");\n_c = GasStation;\nexport default GasStation;\nvar _c;\n$RefreshReg$(_c, \"GasStation\");","map":{"version":3,"names":["React","useState","useEffect","axios","Map","MapMarker","jsxDEV","_jsxDEV","GasStation","radius","stations","_s","state","setState","center","lat","lng","errMsg","isLoading","selectedStation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","prev","err","message","onMarkerClick","station","closeInfoWindow","filteredStations","filter","distance","style","width","height","children","level","map","image","src","size","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","Popup","onClose","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/gas_station.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\"; // MapInfoWindow를 사용하지 않으므로 제거\r\n\r\nfunction GasStation({ radius, stations }) {\r\n    const [state, setState] = useState({\r\n        center: { lat: 33.450701, lng: 126.570667 },\r\n        errMsg: null,\r\n        isLoading: true,\r\n        selectedStation: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const { latitude, longitude } = position.coords;\r\n            setState(prev => ({\r\n                ...prev,\r\n                center: { lat: latitude, lng: longitude },\r\n                isLoading: false\r\n            }));\r\n        }, (err) => {\r\n            setState(prev => ({ ...prev, errMsg: err.message, isLoading: false }));\r\n        });\r\n    }, []);\r\n\r\n    // 지도상에서 주유소 마커를 클릭했을 때 호출될 함수\r\n    const onMarkerClick = (station) => {\r\n        setState(prev => ({ ...prev, selectedStation: station }));\r\n    };\r\n\r\n    // 팝업을 닫는 함수\r\n    const closeInfoWindow = () => {\r\n        setState(prev => ({ ...prev, selectedStation: null }));\r\n    };\r\n\r\n    // radius와 stations props를 기반으로 지도에 표시할 주유소를 필터링합니다.\r\n    const filteredStations = stations.filter(station => station.distance <= radius);\r\n\r\n    return (\r\n        <div style={{ width: \"100%\", height: \"100%\", position: 'relative' }}>\r\n            <Map center={state.center} style={{ width: \"100%\", height: \"100%\" }} level={3}>\r\n                {!state.isLoading && filteredStations.map(station => (\r\n                    <MapMarker\r\n                        key={station.name}\r\n                        position={{ lat: station.latitude, lng: station.longitude }}\r\n                        image={{\r\n                            src: \"img/fuel.png\", // 실제 마커 이미지 경로로 대체\r\n                            size: { width: 24, height: 35 },\r\n                        }}\r\n                        onClick={() => onMarkerClick(station)}\r\n                    />\r\n                ))}\r\n                {/* ... 팝업 관련 로직은 상황에 따라 적용 */}\r\n            </Map>\r\n            {/* selectedStation이 있는 경우에만 Popup을 렌더링합니다. */}\r\n            {state.selectedStation && (\r\n                <Popup station={state.selectedStation} onClose={closeInfoWindow} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GasStation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}