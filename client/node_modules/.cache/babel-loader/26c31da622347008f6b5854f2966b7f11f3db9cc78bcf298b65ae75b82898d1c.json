{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\gas_station.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Map, MapMarker, InfoWindow } from \"react-kakao-maps-sdk\";\nimport './map_ui.module.css'; // 스타일시트 경로 확인 필요\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GasStation() {\n  _s();\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    stations: [],\n    errMsg: null,\n    isLoading: true,\n    selectedStation: null\n  });\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      fetchStations(position.coords.latitude, position.coords.longitude, state.radius);\n    }, err => {\n      console.error(\"Geolocation error:\", err.message);\n      setState(prev => ({\n        ...prev,\n        errMsg: err.message,\n        isLoading: false\n      }));\n    });\n  }, []);\n  const fetchStations = (latitude, longitude, radius) => {\n    axios.post('http://localhost:5000/get-stations', {\n      latitude,\n      longitude,\n      radius: radius * 1000 // 변환: km -> m\n    }).then(response => {\n      setState(prev => ({\n        ...prev,\n        center: {\n          lat: latitude,\n          lng: longitude\n        },\n        stations: response.data,\n        isLoading: false\n      }));\n    }).catch(error => {\n      console.error('Failed to fetch gas stations:', error);\n      setState(prev => ({\n        ...prev,\n        errMsg: '주유소 정보를 가져오는데 실패했습니다.',\n        isLoading: false\n      }));\n    });\n  };\n  const handleMarkerClick = station => {\n    setState(prev => ({\n      ...prev,\n      selectedStation: station\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Map, {\n    center: state.center,\n    style: {\n      width: \"100%\",\n      height: \"400px\"\n    },\n    level: 3,\n    children: [/*#__PURE__*/_jsxDEV(MapMarker, {\n      position: state.center,\n      image: {\n        src: \"/img/my_location.png\",\n        size: {\n          width: 24,\n          height: 24\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), !state.isLoading && state.stations.map(station => /*#__PURE__*/_jsxDEV(MapMarker, {\n      position: {\n        lat: station.latitude,\n        lng: station.longitude\n      },\n      onClick: () => handleMarkerClick(station),\n      image: {\n        src: \"/img/gas_station.png\",\n        size: {\n          width: 32,\n          height: 32\n        }\n      },\n      children: state.selectedStation === station && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: station.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [station.price, \"\\uC6D0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: station.brand\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [station.distance, \"km\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this)\n    }, station.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(GasStation, \"+zXlwemAFx+qwh4irmfpaEDm60c=\");\n_c = GasStation;\nexport default GasStation;\nvar _c;\n$RefreshReg$(_c, \"GasStation\");","map":{"version":3,"names":["React","useState","useEffect","axios","Map","MapMarker","InfoWindow","jsxDEV","_jsxDEV","GasStation","_s","state","setState","center","lat","lng","stations","errMsg","isLoading","selectedStation","navigator","geolocation","getCurrentPosition","position","fetchStations","coords","latitude","longitude","radius","err","console","error","message","prev","post","then","response","data","catch","handleMarkerClick","station","style","width","height","level","children","image","src","size","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","name","price","brand","distance","id","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/gas_station.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Map, MapMarker, InfoWindow } from \"react-kakao-maps-sdk\";\r\nimport './map_ui.module.css'; // 스타일시트 경로 확인 필요\r\n\r\nfunction GasStation() {\r\n    const [state, setState] = useState({\r\n        center: { lat: 33.450701, lng: 126.570667 },\r\n        stations: [],\r\n        errMsg: null,\r\n        isLoading: true,\r\n        selectedStation: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n                fetchStations(position.coords.latitude, position.coords.longitude, state.radius);\r\n            },\r\n            (err) => {\r\n                console.error(\"Geolocation error:\", err.message);\r\n                setState(prev => ({ ...prev, errMsg: err.message, isLoading: false }));\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    const fetchStations = (latitude, longitude, radius) => {\r\n        axios.post('http://localhost:5000/get-stations', {\r\n            latitude, longitude, radius: radius * 1000 // 변환: km -> m\r\n        })\r\n            .then(response => {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    center: { lat: latitude, lng: longitude },\r\n                    stations: response.data,\r\n                    isLoading: false\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to fetch gas stations:', error);\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    errMsg: '주유소 정보를 가져오는데 실패했습니다.',\r\n                    isLoading: false\r\n                }));\r\n            });\r\n    };\r\n\r\n    const handleMarkerClick = station => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            selectedStation: station\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <Map center={state.center} style={{ width: \"100%\", height: \"400px\" }} level={3}>\r\n            <MapMarker position={state.center} image={{ src: \"/img/my_location.png\", size: { width: 24, height: 24 } }} />\r\n            {!state.isLoading && state.stations.map(station => (\r\n                <MapMarker\r\n                    key={station.id}\r\n                    position={{ lat: station.latitude, lng: station.longitude }}\r\n                    onClick={() => handleMarkerClick(station)}\r\n                    image={{ src: \"/img/gas_station.png\", size: { width: 32, height: 32 } }}\r\n                >\r\n                    {state.selectedStation === station && (\r\n                        <InfoWindow>\r\n                            <div>\r\n                                <p>{station.name}</p>\r\n                                <p>{station.price}원</p>\r\n                                <p>{station.brand}</p>\r\n                                <p>{station.distance}km</p>\r\n                            </div>\r\n                        </InfoWindow>\r\n                    )}\r\n                </MapMarker>\r\n            ))}\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default GasStation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}