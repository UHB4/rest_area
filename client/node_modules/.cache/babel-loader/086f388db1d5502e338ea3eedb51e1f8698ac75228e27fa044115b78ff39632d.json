{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\gas_station.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Gas_station() {\n  _s();\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    stations: [],\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    const fetchPositionAndStations = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const newPos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          console.log(\"New position:\", newPos);\n          axios.post('http://localhost:5000/get-stations', {\n            latitude: newPos.lat,\n            longitude: newPos.lng\n          }).then(response => {\n            console.log('Gas stations fetched:', response.data);\n            setState(prev => ({\n              ...prev,\n              center: newPos,\n              stations: response.data,\n              isLoading: false\n            }));\n          }).catch(error => {\n            console.error('Failed to fetch gas stations:', error);\n            setState(prev => ({\n              ...prev,\n              errMsg: '주유소 정보를 가져오는데 실패했습니다.',\n              isLoading: false\n            }));\n          });\n        }, err => {\n          console.error(\"Geolocation error:\", err.message);\n          setState(prev => ({\n            ...prev,\n            errMsg: err.message,\n            isLoading: false\n          }));\n        });\n      } else {\n        setState(prev => ({\n          ...prev,\n          errMsg: \"Geolocation을 사용할 수 없어요.\",\n          isLoading: false\n        }));\n      }\n    };\n    fetchPositionAndStations();\n  }, []);\n  const fetchGasStationInfo = (latitude, longitude) => {\n    console.log(\"Fetching gas stations with:\", {\n      latitude,\n      longitude\n    });\n    axios.post('http://localhost:5000/get-stations', {\n      latitude,\n      longitude\n    }).then(response => {\n      console.log('Gas stations fetched:', response.data);\n      setState(prev => ({\n        ...prev,\n        stations: response.data,\n        isLoading: false\n      }));\n    }).catch(error => {\n      console.error('Failed to fetch gas stations:', error);\n      setState(prev => ({\n        ...prev,\n        errMsg: '주유소 정보를 가져오는데 실패했습니다.',\n        isLoading: false\n      }));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Map, {\n    center: state.center,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    level: 3,\n    children: !state.isLoading && state.stations.map(station => /*#__PURE__*/_jsxDEV(MapMarker, {\n      position: {\n        lat: station.latitude,\n        lng: station.longitude\n      }\n    }, station.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(Gas_station, \"fj4ECsHV5WIYL6IvijnJXL93uyw=\");\n_c = Gas_station;\nexport default Gas_station;\nvar _c;\n$RefreshReg$(_c, \"Gas_station\");","map":{"version":3,"names":["React","useState","useEffect","axios","Map","MapMarker","jsxDEV","_jsxDEV","Gas_station","_s","state","setState","center","lat","lng","stations","errMsg","isLoading","fetchPositionAndStations","navigator","geolocation","getCurrentPosition","position","newPos","coords","latitude","longitude","console","log","post","then","response","data","prev","catch","error","err","message","fetchGasStationInfo","style","width","height","level","children","map","station","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/gas_station.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\r\n\r\nfunction Gas_station() {\r\n    const [state, setState] = useState({\r\n        center: { lat: 33.450701, lng: 126.570667 },\r\n        stations: [],\r\n        errMsg: null,\r\n        isLoading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchPositionAndStations = () => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        const newPos = { lat: position.coords.latitude, lng: position.coords.longitude };\r\n                        console.log(\"New position:\", newPos);\r\n                        axios.post('http://localhost:5000/get-stations', { latitude: newPos.lat, longitude: newPos.lng })\r\n                            .then(response => {\r\n                                console.log('Gas stations fetched:', response.data);\r\n                                setState(prev => ({\r\n                                    ...prev,\r\n                                    center: newPos,\r\n                                    stations: response.data,\r\n                                    isLoading: false\r\n                                }));\r\n                            })\r\n                            .catch(error => {\r\n                                console.error('Failed to fetch gas stations:', error);\r\n                                setState(prev => ({\r\n                                    ...prev,\r\n                                    errMsg: '주유소 정보를 가져오는데 실패했습니다.',\r\n                                    isLoading: false\r\n                                }));\r\n                            });\r\n                    },\r\n                    (err) => {\r\n                        console.error(\"Geolocation error:\", err.message);\r\n                        setState(prev => ({ ...prev, errMsg: err.message, isLoading: false }));\r\n                    }\r\n                );\r\n            } else {\r\n                setState(prev => ({ ...prev, errMsg: \"Geolocation을 사용할 수 없어요.\", isLoading: false }));\r\n            }\r\n        };\r\n\r\n        fetchPositionAndStations();\r\n    }, []);\r\n\r\n    const fetchGasStationInfo = (latitude, longitude) => {\r\n        console.log(\"Fetching gas stations with:\", { latitude, longitude });\r\n        axios.post('http://localhost:5000/get-stations', { latitude, longitude })\r\n            .then(response => {\r\n                console.log('Gas stations fetched:', response.data);\r\n                setState(prev => ({ ...prev, stations: response.data, isLoading: false }));\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to fetch gas stations:', error);\r\n                setState(prev => ({ ...prev, errMsg: '주유소 정보를 가져오는데 실패했습니다.', isLoading: false }));\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Map center={state.center} style={{ width: \"100%\", height: \"100%\" }} level={3}>\r\n            {!state.isLoading && state.stations.map(station => (\r\n                <MapMarker key={station.name} position={{ lat: station.latitude, lng: station.longitude }} />\r\n            ))}\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default Gas_station;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}