{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\routes\\\\Chart\\\\NearbyGasChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NearbyGasChart({\n  data\n}) {\n  _s();\n  const [stations, setStations] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setStations(data);\n    }\n  }, [data]);\n  ChartJS.register(ArcElement, Tooltip, Legend);\n  let labels = [];\n  if (stations.length > 0) {\n    labels = stations.map((station, index) => {\n      return `${index + 1}순위 - ${station.name}`;\n    });\n  }\n  // console.log(labels)\n  let price = [];\n  if (stations.length > 0) {\n    price = stations.map(station => `${station.price}원`);\n  }\n\n  // console.log(price)\n  const combinedData = labels.map((label, index) => `${label} : ${price[index]}`);\n  const chartData = {\n    labels: combinedData,\n    datasets: [{\n      // label: '가격',\n      data: price.map(price => parseInt(price)),\n      // 가격 데이터를 사용하여 데이터 생성\n      backgroundColor: labels.map((_, index) => `hsl(${60 + index * 10}, 80%, ${65 - index * 3}%)`),\n      borderColor: Array.from({\n        length: labels.length\n      }, () => 'green'),\n      borderWidth: 1\n    }]\n  };\n  const legendTitle = {\n    display: true,\n    text: '내 주변 주유소 가격비교',\n    padding: 20,\n    // 제목과 범례 사이의 간격 조절\n    font: {\n      size: 16,\n      // 폰트 크기 설정\n      weight: 'bold' // 폰트 굵기 설정\n    }\n  };\n  const navigate = useNavigate();\n  const handleChartClick = (event, elements) => {\n    if (!elements || elements.length === 0) {\n      return;\n    }\n    if (elements.length > 0) {\n      // const clickedElementIndex = elements[0]._index;\n      // const clickedData = chartData.labels[clickedElementIndex];\n      navigate(`/map`);\n    }\n  };\n  const options = {\n    plugins: {\n      tooltip: {\n        bodyFont: {\n          size: 15\n        },\n        callbacks: {\n          title: function () {\n            return '';\n          },\n          label: function (context) {\n            return `${context.label.split(\" : \")[0]}: ${context.label.split(\" : \")[1]}`;\n            // return `${context.parsed.y}원`;\n          }\n        }\n      },\n      legend: {\n        position: 'top',\n        title: legendTitle,\n        labels: {\n          boxHeight: 17.5,\n          maxHeight: 105\n          // filter: (legendItem, data) => {\n          //     return data.datasets.length > 5 ? data.datasets.indexOf(legendItem.dataset) < 5 : true;\n          // }\n        }\n      }\n    },\n    onClick: handleChartClick\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          maxWidth: '400px',\n          margin: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: chartData,\n          options: options,\n          width: 400,\n          height: 460\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n_s(NearbyGasChart, \"vp7F2x1kqj/TXoiwSMKAZITYPcg=\", false, function () {\n  return [useNavigate];\n});\n_c = NearbyGasChart;\nexport default NearbyGasChart;\nvar _c;\n$RefreshReg$(_c, \"NearbyGasChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","useNavigate","jsxDEV","_jsxDEV","NearbyGasChart","data","_s","stations","setStations","register","labels","length","map","station","index","name","price","combinedData","label","chartData","datasets","parseInt","backgroundColor","_","borderColor","Array","from","borderWidth","legendTitle","display","text","padding","font","size","weight","navigate","handleChartClick","event","elements","options","plugins","tooltip","bodyFont","callbacks","title","context","split","legend","position","boxHeight","maxHeight","onClick","className","children","style","width","maxWidth","margin","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/routes/Chart/NearbyGasChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nfunction NearbyGasChart({ data }) {\r\n    const [stations, setStations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            setStations(data);\r\n        }\r\n    }, [data]);\r\n\r\n    ChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\n    let labels = [];\r\n\r\n    if (stations.length > 0) {\r\n        labels = stations.map((station, index) => {\r\n            return `${index + 1}순위 - ${station.name}`;\r\n        });\r\n    }\r\n    // console.log(labels)\r\n    let price = [];\r\n    if (stations.length > 0) {\r\n        price = stations.map((station) => `${station.price}원`);\r\n    }\r\n\r\n\r\n    // console.log(price)\r\n    const combinedData = labels.map((label, index) => (`${label} : ${price[index]}`));\r\n\r\n    const chartData = {\r\n\r\n        labels: combinedData,\r\n        datasets: [\r\n            {\r\n                // label: '가격',\r\n                data: price.map((price) => parseInt(price)), // 가격 데이터를 사용하여 데이터 생성\r\n                backgroundColor: labels.map((_, index) => `hsl(${60 + index * 10}, 80%, ${65 - index * 3}%)`),\r\n                borderColor: Array.from({ length: labels.length }, () => 'green'),\r\n                borderWidth: 1,\r\n            }\r\n        ]\r\n    };\r\n    const legendTitle = {\r\n        display: true,\r\n        text: '내 주변 주유소 가격비교',\r\n        padding: 20, // 제목과 범례 사이의 간격 조절\r\n        font: {\r\n            size: 16, // 폰트 크기 설정\r\n            weight: 'bold', // 폰트 굵기 설정\r\n        }\r\n    };\r\n    const navigate = useNavigate();\r\n    const handleChartClick = (event, elements) => {\r\n        if (!elements || elements.length === 0) {\r\n            return;\r\n        }\r\n        if (elements.length > 0) {\r\n            // const clickedElementIndex = elements[0]._index;\r\n            // const clickedData = chartData.labels[clickedElementIndex];\r\n            navigate(`/map`);\r\n        }\r\n    };\r\n    const options = {\r\n        plugins: {\r\n            tooltip: {\r\n                bodyFont: {\r\n                    size: 15,\r\n                },\r\n                callbacks: {\r\n                    title: function () {\r\n                        return '';\r\n                    },\r\n                    label: function (context) {\r\n                        return `${context.label.split(\" : \")[0]}: ${context.label.split(\" : \")[1]}`;\r\n                        // return `${context.parsed.y}원`;\r\n\r\n                    }\r\n                }\r\n            },\r\n            legend: {\r\n                position: 'top',\r\n                title: legendTitle,\r\n                labels:\r\n                    {\r\n                        boxHeight: 17.5,\r\n                        maxHeight: 105,\r\n                        // filter: (legendItem, data) => {\r\n                        //     return data.datasets.length > 5 ? data.datasets.indexOf(legendItem.dataset) < 5 : true;\r\n                        // }\r\n\r\n                    }\r\n\r\n            },\r\n        },\r\n\r\n        onClick: handleChartClick,\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"App\">\r\n                <div style={{width: '100%', maxWidth: '400px', margin: 'auto'}}>\r\n                    <Doughnut data={chartData} options={options} width={400} height={460} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NearbyGasChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}