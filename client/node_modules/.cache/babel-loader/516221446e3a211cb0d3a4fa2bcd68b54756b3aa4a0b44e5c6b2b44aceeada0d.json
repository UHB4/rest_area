{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './chat.css';\n// import { FaMicrophone } from 'react-icons/fa';\n// import { Link } from 'react-router-dom';\n//\n// function Chatbot() {\n//     const [messages, setMessages] = useState([]);\n//     const [fuelStations, setFuelStations] = useState([]);\n//     const [chargingStations, setChargingStations] = useState([]);\n//     const [isListening, setIsListening] = useState(false);\n//\n//     useEffect(() => {\n//         const initialMessage = {\n//             id: Date.now(),\n//             text: '안녕하세요! 어떻게 도와드릴까요?',\n//             sender: 'bot'\n//         };\n//         setMessages([initialMessage]);\n//         speak(initialMessage.text);\n//\n//         const chatContainer = document.querySelector('.chat-container');\n//         chatContainer.scrollTop = chatContainer.scrollHeight;\n//     }, []);\n//\n//     useEffect(() => {\n//         const chatContainer = document.querySelector('.chat-container');\n//         chatContainer.scrollTop = chatContainer.scrollHeight;\n//     }, [messages]);\n//\n//     const speak = (text) => {\n//         const synth = window.speechSynthesis;\n//         const utterance = new SpeechSynthesisUtterance(text);\n//         utterance.lang = 'ko-KR';\n//         synth.speak(utterance);\n//     };\n//\n//     const handleSpeech = () => {\n//         const recognition = new window.webkitSpeechRecognition();\n//         recognition.lang = 'ko-KR';\n//         recognition.start();\n//\n//         recognition.onresult = (event) => {\n//             const speechResult = event.results[0][0].transcript;\n//             console.log(`Recognized: ${speechResult}`);\n//             handleMessage(speechResult);\n//             setIsListening(false);\n//         };\n//\n//         recognition.onend = () => {\n//             setIsListening(false);\n//         };\n//\n//         recognition.onerror = (event) => {\n//             console.error(\"Speech recognition error\", event.error);\n//             setIsListening(false);\n//         };\n//     };\n//\n//     const fetchChargingStations = async (latitude, longitude) => {\n//         try {\n//             const response = await axios.post('http://localhost:5000/location', {\n//                 latitude: latitude,\n//                 longitude: longitude\n//             });\n//             console.log('Charging stations data:', response.data.stations);\n//             setChargingStations(response.data.stations);\n//             const resultsMessage = response.data.stations.length > 0 ? {\n//                 id: Date.now(),\n//                 text: `아래 전기차 충전소 정보는 반경 5KM 이내에 있는 전기차 충전소입니다.`,\n//                 sender: 'bot'\n//             } : {\n//                 id: Date.now(),\n//                 text: `반경 5KM 이내에 전기차 충전소가 없습니다.`,\n//                 sender: 'bot'\n//             };\n//             setMessages(messages => [...messages, resultsMessage]);\n//             speak(resultsMessage.text);\n//         } catch (error) {\n//             console.error(\"Error fetching stations:\", error);\n//         }\n//     };\n//\n//     const fetchFuelPrices = async (latitude, longitude, type) => {\n//         try {\n//             const response = await axios({\n//                 method: 'post',\n//                 url: 'http://localhost:5000/get_gas_stations22',\n//                 data: { latitude, longitude, type }\n//             });\n//\n//             const parser = new DOMParser();\n//             const xmlDoc = parser.parseFromString(response.data.data, \"application/xml\");\n//             const oilNodes = xmlDoc.getElementsByTagName(\"OIL\");\n//\n//             const stations = Array.from(oilNodes).map(node => ({\n//                 id: node.getElementsByTagName(\"UNI_ID\")[0].textContent,\n//                 name: node.getElementsByTagName(\"OS_NM\")[0].textContent,\n//                 price: node.getElementsByTagName(\"PRICE\")[0].textContent,\n//                 distance: node.getElementsByTagName(\"DISTANCE\")[0].textContent\n//             })).sort((a, b) => parseFloat(a.price) - parseFloat(b.price)).slice(0, 10);\n//\n//             setFuelStations(stations);\n//\n//             const resultsMessage = stations.length > 0 ? {\n//                 id: Date.now(),\n//                 text: `아래 주유소 정보는 반경 5KM 이내에 있는 주유소입니다.`,\n//                 sender: 'bot'\n//             } : {\n//                 id: Date.now(),\n//                 text: `반경 5KM 이내에 주유소가 없습니다.`,\n//                 sender: 'bot'\n//             };\n//             setMessages(messages => [...messages, resultsMessage]);\n//             speak(resultsMessage.text);\n//         } catch (error) {\n//             console.error(\"Error fetching stations:\", error);\n//         }\n//     };\n//\n//     const formatFuelStationDistance = (distance) => {\n//         const distanceInMeters = parseFloat(distance);\n//         return `${(distanceInMeters / 1000).toFixed(2)}km`;\n//     };\n//\n//     const formatChargingStationDistance = (distance) => {\n//         const distanceInMeters = parseFloat(distance);\n//         return `${distanceInMeters.toFixed(2)}km`;\n//     };\n//\n//     const handleMessage = (message) => {\n//         setMessages(messages => [...messages, {id: Date.now(), text: message, sender: 'user'}]);\n//         speak(message);\n//\n//         if (message.includes('주유소')) {\n//             if (\"geolocation\" in navigator) {\n//                 navigator.geolocation.getCurrentPosition(position => {\n//                     const {latitude, longitude} = position.coords;\n//                     fetchFuelPrices(latitude, longitude, 'fuel');\n//                 }, handleGeolocationError);\n//             } else {\n//                 const botResponse = {id: Date.now(), text: \"Geolocation이 지원되지 않는 브라우저입니다.\", sender: 'bot'};\n//                 setMessages(messages => [...messages, botResponse]);\n//                 speak(botResponse.text);\n//             }\n//         } else if (message.includes('전기차')) {\n//             if (\"geolocation\" in navigator) {\n//                 navigator.geolocation.getCurrentPosition(position => {\n//                     const {latitude, longitude} = position.coords;\n//                     fetchChargingStations(latitude, longitude);\n//                 }, handleGeolocationError);\n//             } else {\n//                 const botResponse = {id: Date.now(), text: \"Geolocation이 지원되지 않는 브라우저입니다.\", sender: 'bot'};\n//                 setMessages(messages => [...messages, botResponse]);\n//                 speak(botResponse.text);\n//             }\n//         }\n//         if (message.includes('로그인 페이지로 이동하기')) {\n//             const loginUrl = \"http://localhost:3000/login\";\n//             const botResponse = {\n//                 id: Date.now(),\n//                 text: `로그인 페이지로 이동하려면 여기를 클릭하세요.`,\n//                 sender: 'bot',\n//                 url: loginUrl // URL을 메시지 객체에 추가\n//             };\n//             setMessages(messages => [...messages, botResponse]);\n//             speak(\"로그인 페이지 링크를 보냈습니다.\");\n//         }\n//         if (message.includes('통계 차트 보러가기')) {\n//             const statsUrl = \"http://localhost:3000/sub\";\n//             const botResponse = {\n//                 id: Date.now(),\n//                 text: `통계 차트 페이지로 이동하려면 여기를 클릭하세요.`,\n//                 sender: 'bot',\n//                 url: statsUrl\n//             };\n//             setMessages(messages => [...messages, botResponse]);\n//             speak(\"통계 차트 페이지 링크를 보냈습니다.\");\n//         }\n//     };\n//\n//\n//     const handleGeolocationError = (error) => {\n//         let errorMessage = '';\n//         switch(error.code) {\n//             case error.PERMISSION_DENIED:\n//                 errorMessage = \"위치 정보 접근이 거부되었습니다.\";\n//                 break;\n//             case error.POSITION_UNAVAILABLE:\n//                 errorMessage = \"위치 정보를 사용할 수 없습니다.\";\n//                 break;\n//             case error.TIMEOUT:\n//                 errorMessage = \"위치 정보를 가져오는 요청이 시간 초과되었습니다.\";\n//                 break;\n//             default:\n//                 errorMessage = \"알 수 없는 오류가 발생했습니다.\";\n//                 break;\n//         }\n//         const botResponse = {\n//             id: Date.now(),\n//             text: errorMessage,\n//             sender: 'bot'\n//         };\n//         setMessages(messages => [...messages, botResponse]);\n//         speak(botResponse.text);\n//     };\n//\n//     return (\n//         <div className={\"APP\"}>\n//             <header>\n//                 <h1>채팅로보트 임니다</h1>\n//             </header>\n//             <div className=\"chat-container\">\n//                 {messages.map(msg => (\n//                     <div key={msg.id} className={`message ${msg.sender}`}>\n//                         {msg.url ? (\n//                             <Link to={msg.url}>{msg.text}</Link>\n//                         ) : (\n//                             msg.text\n//                         )}\n//                     </div>\n//                 ))}\n//             </div>\n//             <div className=\"stations-list\">\n//                 <h2>주유소 정보:</h2>\n//                 <ul>\n//                     {fuelStations.map(station => (\n//                         <li key={station.id}>\n//                             {station.name} - {station.price}원 - 현 위치로부터 {formatFuelStationDistance(station.distance)} 떨어짐\n//                         </li>\n//                     ))}\n//                 </ul>\n//             </div>\n//             <div className=\"stations-list\">\n//                 <h2>전기차 충전소 정보:</h2>\n//                 <ul>\n//                     {chargingStations.map((station, index) => (\n//                         <li key={index}>\n//                             {station['Station Name']} - 현 위치로부터 {formatChargingStationDistance(station.Distance)} 떨어짐\n//                         </li>\n//                     ))}\n//                 </ul>\n//             </div>\n//             <div className=\"user-input\">\n//                 <button onClick={() => handleMessage('내 주변 최저가 주유소 찾기')}>내 주변 최저가 주유소 찾기</button>\n//                 <button onClick={() => handleMessage('내 주변 전기차 충전소 찾기')}>내 주변 전기차 충전소 찾기</button>\n//                 <button onClick={() => handleMessage('로그인 페이지로 이동하기')}>로그인 페이지로 이동하기</button>\n//                 <button onClick={() => handleMessage('통계 차트 보러가기')}>통계 차트 보러가기</button>\n//                 <div className=\"tooltip\">\n//                     <button className=\"voice-button\" onClick={handleSpeech} disabled={isListening}>\n//                         <FaMicrophone/>\n//                         {isListening ? \"듣는 중...\" : \"음성인식\"}\n//                     </button>\n//                     <span className=\"tooltiptext\">\n//                         음성인식 버튼을 누르고 주유소 or 전기차 라고 마이크에 말하시면<br/> 그에 맞는 정보가 표시됩니다.<br/>\n//                         (주유소는 반경 5KM 내에 있는<br/> 최저가 주유소가,<br/> 전기차는 반경 5KM 내에 있는<br/> 충전소가 표시됩니다.)\n//                     </span>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n//\n// export default Chatbot;","map":{"version":3,"names":[],"sources":["C:/UHB/rest_area/src/chatbot/chat.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import './chat.css';\r\n// import { FaMicrophone } from 'react-icons/fa';\r\n// import { Link } from 'react-router-dom';\r\n//\r\n// function Chatbot() {\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [fuelStations, setFuelStations] = useState([]);\r\n//     const [chargingStations, setChargingStations] = useState([]);\r\n//     const [isListening, setIsListening] = useState(false);\r\n//\r\n//     useEffect(() => {\r\n//         const initialMessage = {\r\n//             id: Date.now(),\r\n//             text: '안녕하세요! 어떻게 도와드릴까요?',\r\n//             sender: 'bot'\r\n//         };\r\n//         setMessages([initialMessage]);\r\n//         speak(initialMessage.text);\r\n//\r\n//         const chatContainer = document.querySelector('.chat-container');\r\n//         chatContainer.scrollTop = chatContainer.scrollHeight;\r\n//     }, []);\r\n//\r\n//     useEffect(() => {\r\n//         const chatContainer = document.querySelector('.chat-container');\r\n//         chatContainer.scrollTop = chatContainer.scrollHeight;\r\n//     }, [messages]);\r\n//\r\n//     const speak = (text) => {\r\n//         const synth = window.speechSynthesis;\r\n//         const utterance = new SpeechSynthesisUtterance(text);\r\n//         utterance.lang = 'ko-KR';\r\n//         synth.speak(utterance);\r\n//     };\r\n//\r\n//     const handleSpeech = () => {\r\n//         const recognition = new window.webkitSpeechRecognition();\r\n//         recognition.lang = 'ko-KR';\r\n//         recognition.start();\r\n//\r\n//         recognition.onresult = (event) => {\r\n//             const speechResult = event.results[0][0].transcript;\r\n//             console.log(`Recognized: ${speechResult}`);\r\n//             handleMessage(speechResult);\r\n//             setIsListening(false);\r\n//         };\r\n//\r\n//         recognition.onend = () => {\r\n//             setIsListening(false);\r\n//         };\r\n//\r\n//         recognition.onerror = (event) => {\r\n//             console.error(\"Speech recognition error\", event.error);\r\n//             setIsListening(false);\r\n//         };\r\n//     };\r\n//\r\n//     const fetchChargingStations = async (latitude, longitude) => {\r\n//         try {\r\n//             const response = await axios.post('http://localhost:5000/location', {\r\n//                 latitude: latitude,\r\n//                 longitude: longitude\r\n//             });\r\n//             console.log('Charging stations data:', response.data.stations);\r\n//             setChargingStations(response.data.stations);\r\n//             const resultsMessage = response.data.stations.length > 0 ? {\r\n//                 id: Date.now(),\r\n//                 text: `아래 전기차 충전소 정보는 반경 5KM 이내에 있는 전기차 충전소입니다.`,\r\n//                 sender: 'bot'\r\n//             } : {\r\n//                 id: Date.now(),\r\n//                 text: `반경 5KM 이내에 전기차 충전소가 없습니다.`,\r\n//                 sender: 'bot'\r\n//             };\r\n//             setMessages(messages => [...messages, resultsMessage]);\r\n//             speak(resultsMessage.text);\r\n//         } catch (error) {\r\n//             console.error(\"Error fetching stations:\", error);\r\n//         }\r\n//     };\r\n//\r\n//     const fetchFuelPrices = async (latitude, longitude, type) => {\r\n//         try {\r\n//             const response = await axios({\r\n//                 method: 'post',\r\n//                 url: 'http://localhost:5000/get_gas_stations22',\r\n//                 data: { latitude, longitude, type }\r\n//             });\r\n//\r\n//             const parser = new DOMParser();\r\n//             const xmlDoc = parser.parseFromString(response.data.data, \"application/xml\");\r\n//             const oilNodes = xmlDoc.getElementsByTagName(\"OIL\");\r\n//\r\n//             const stations = Array.from(oilNodes).map(node => ({\r\n//                 id: node.getElementsByTagName(\"UNI_ID\")[0].textContent,\r\n//                 name: node.getElementsByTagName(\"OS_NM\")[0].textContent,\r\n//                 price: node.getElementsByTagName(\"PRICE\")[0].textContent,\r\n//                 distance: node.getElementsByTagName(\"DISTANCE\")[0].textContent\r\n//             })).sort((a, b) => parseFloat(a.price) - parseFloat(b.price)).slice(0, 10);\r\n//\r\n//             setFuelStations(stations);\r\n//\r\n//             const resultsMessage = stations.length > 0 ? {\r\n//                 id: Date.now(),\r\n//                 text: `아래 주유소 정보는 반경 5KM 이내에 있는 주유소입니다.`,\r\n//                 sender: 'bot'\r\n//             } : {\r\n//                 id: Date.now(),\r\n//                 text: `반경 5KM 이내에 주유소가 없습니다.`,\r\n//                 sender: 'bot'\r\n//             };\r\n//             setMessages(messages => [...messages, resultsMessage]);\r\n//             speak(resultsMessage.text);\r\n//         } catch (error) {\r\n//             console.error(\"Error fetching stations:\", error);\r\n//         }\r\n//     };\r\n//\r\n//     const formatFuelStationDistance = (distance) => {\r\n//         const distanceInMeters = parseFloat(distance);\r\n//         return `${(distanceInMeters / 1000).toFixed(2)}km`;\r\n//     };\r\n//\r\n//     const formatChargingStationDistance = (distance) => {\r\n//         const distanceInMeters = parseFloat(distance);\r\n//         return `${distanceInMeters.toFixed(2)}km`;\r\n//     };\r\n//\r\n//     const handleMessage = (message) => {\r\n//         setMessages(messages => [...messages, {id: Date.now(), text: message, sender: 'user'}]);\r\n//         speak(message);\r\n//\r\n//         if (message.includes('주유소')) {\r\n//             if (\"geolocation\" in navigator) {\r\n//                 navigator.geolocation.getCurrentPosition(position => {\r\n//                     const {latitude, longitude} = position.coords;\r\n//                     fetchFuelPrices(latitude, longitude, 'fuel');\r\n//                 }, handleGeolocationError);\r\n//             } else {\r\n//                 const botResponse = {id: Date.now(), text: \"Geolocation이 지원되지 않는 브라우저입니다.\", sender: 'bot'};\r\n//                 setMessages(messages => [...messages, botResponse]);\r\n//                 speak(botResponse.text);\r\n//             }\r\n//         } else if (message.includes('전기차')) {\r\n//             if (\"geolocation\" in navigator) {\r\n//                 navigator.geolocation.getCurrentPosition(position => {\r\n//                     const {latitude, longitude} = position.coords;\r\n//                     fetchChargingStations(latitude, longitude);\r\n//                 }, handleGeolocationError);\r\n//             } else {\r\n//                 const botResponse = {id: Date.now(), text: \"Geolocation이 지원되지 않는 브라우저입니다.\", sender: 'bot'};\r\n//                 setMessages(messages => [...messages, botResponse]);\r\n//                 speak(botResponse.text);\r\n//             }\r\n//         }\r\n//         if (message.includes('로그인 페이지로 이동하기')) {\r\n//             const loginUrl = \"http://localhost:3000/login\";\r\n//             const botResponse = {\r\n//                 id: Date.now(),\r\n//                 text: `로그인 페이지로 이동하려면 여기를 클릭하세요.`,\r\n//                 sender: 'bot',\r\n//                 url: loginUrl // URL을 메시지 객체에 추가\r\n//             };\r\n//             setMessages(messages => [...messages, botResponse]);\r\n//             speak(\"로그인 페이지 링크를 보냈습니다.\");\r\n//         }\r\n//         if (message.includes('통계 차트 보러가기')) {\r\n//             const statsUrl = \"http://localhost:3000/sub\";\r\n//             const botResponse = {\r\n//                 id: Date.now(),\r\n//                 text: `통계 차트 페이지로 이동하려면 여기를 클릭하세요.`,\r\n//                 sender: 'bot',\r\n//                 url: statsUrl\r\n//             };\r\n//             setMessages(messages => [...messages, botResponse]);\r\n//             speak(\"통계 차트 페이지 링크를 보냈습니다.\");\r\n//         }\r\n//     };\r\n//\r\n//\r\n//     const handleGeolocationError = (error) => {\r\n//         let errorMessage = '';\r\n//         switch(error.code) {\r\n//             case error.PERMISSION_DENIED:\r\n//                 errorMessage = \"위치 정보 접근이 거부되었습니다.\";\r\n//                 break;\r\n//             case error.POSITION_UNAVAILABLE:\r\n//                 errorMessage = \"위치 정보를 사용할 수 없습니다.\";\r\n//                 break;\r\n//             case error.TIMEOUT:\r\n//                 errorMessage = \"위치 정보를 가져오는 요청이 시간 초과되었습니다.\";\r\n//                 break;\r\n//             default:\r\n//                 errorMessage = \"알 수 없는 오류가 발생했습니다.\";\r\n//                 break;\r\n//         }\r\n//         const botResponse = {\r\n//             id: Date.now(),\r\n//             text: errorMessage,\r\n//             sender: 'bot'\r\n//         };\r\n//         setMessages(messages => [...messages, botResponse]);\r\n//         speak(botResponse.text);\r\n//     };\r\n//\r\n//     return (\r\n//         <div className={\"APP\"}>\r\n//             <header>\r\n//                 <h1>채팅로보트 임니다</h1>\r\n//             </header>\r\n//             <div className=\"chat-container\">\r\n//                 {messages.map(msg => (\r\n//                     <div key={msg.id} className={`message ${msg.sender}`}>\r\n//                         {msg.url ? (\r\n//                             <Link to={msg.url}>{msg.text}</Link>\r\n//                         ) : (\r\n//                             msg.text\r\n//                         )}\r\n//                     </div>\r\n//                 ))}\r\n//             </div>\r\n//             <div className=\"stations-list\">\r\n//                 <h2>주유소 정보:</h2>\r\n//                 <ul>\r\n//                     {fuelStations.map(station => (\r\n//                         <li key={station.id}>\r\n//                             {station.name} - {station.price}원 - 현 위치로부터 {formatFuelStationDistance(station.distance)} 떨어짐\r\n//                         </li>\r\n//                     ))}\r\n//                 </ul>\r\n//             </div>\r\n//             <div className=\"stations-list\">\r\n//                 <h2>전기차 충전소 정보:</h2>\r\n//                 <ul>\r\n//                     {chargingStations.map((station, index) => (\r\n//                         <li key={index}>\r\n//                             {station['Station Name']} - 현 위치로부터 {formatChargingStationDistance(station.Distance)} 떨어짐\r\n//                         </li>\r\n//                     ))}\r\n//                 </ul>\r\n//             </div>\r\n//             <div className=\"user-input\">\r\n//                 <button onClick={() => handleMessage('내 주변 최저가 주유소 찾기')}>내 주변 최저가 주유소 찾기</button>\r\n//                 <button onClick={() => handleMessage('내 주변 전기차 충전소 찾기')}>내 주변 전기차 충전소 찾기</button>\r\n//                 <button onClick={() => handleMessage('로그인 페이지로 이동하기')}>로그인 페이지로 이동하기</button>\r\n//                 <button onClick={() => handleMessage('통계 차트 보러가기')}>통계 차트 보러가기</button>\r\n//                 <div className=\"tooltip\">\r\n//                     <button className=\"voice-button\" onClick={handleSpeech} disabled={isListening}>\r\n//                         <FaMicrophone/>\r\n//                         {isListening ? \"듣는 중...\" : \"음성인식\"}\r\n//                     </button>\r\n//                     <span className=\"tooltiptext\">\r\n//                         음성인식 버튼을 누르고 주유소 or 전기차 라고 마이크에 말하시면<br/> 그에 맞는 정보가 표시됩니다.<br/>\r\n//                         (주유소는 반경 5KM 내에 있는<br/> 최저가 주유소가,<br/> 전기차는 반경 5KM 내에 있는<br/> 충전소가 표시됩니다.)\r\n//                     </span>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default Chatbot;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}