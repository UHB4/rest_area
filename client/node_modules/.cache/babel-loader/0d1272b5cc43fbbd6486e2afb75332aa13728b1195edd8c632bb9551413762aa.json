{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\gas_station.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Map, MapMarker, MapInfoWindow } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GasStation() {\n  _s();\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    stations: [],\n    errMsg: null,\n    isLoading: true,\n    selectedStation: null\n  });\n  useEffect(() => {\n    const fetchStations = position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      axios.post('http://localhost:5000/get-stations', {\n        latitude,\n        longitude\n      }).then(response => {\n        setState(prev => ({\n          ...prev,\n          center: {\n            lat: latitude,\n            lng: longitude\n          },\n          stations: response.data,\n          isLoading: false\n        }));\n      }).catch(error => {\n        setState(prev => ({\n          ...prev,\n          errMsg: '주유소 정보를 가져오는데 실패했습니다.',\n          isLoading: false\n        }));\n      });\n    };\n    navigator.geolocation.getCurrentPosition(fetchStations, err => {\n      setState(prev => ({\n        ...prev,\n        errMsg: err.message,\n        isLoading: false\n      }));\n    });\n  }, []);\n  const onMarkerClick = station => {\n    setState(prev => ({\n      ...prev,\n      selectedStation: station\n    }));\n  };\n  const closeInfoWindow = () => {\n    setState(prev => ({\n      ...prev,\n      selectedStation: null\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Map, {\n    center: state.center,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    level: 3,\n    children: [/*#__PURE__*/_jsxDEV(MapMarker, {\n      position: state.center\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), \" \", !state.isLoading && state.stations.map(station => /*#__PURE__*/_jsxDEV(MapMarker, {\n      position: {\n        lat: station.latitude,\n        lng: station.longitude\n      },\n      image: {\n        src: \"img/fuel.png\",\n        size: {\n          width: 24,\n          height: 35\n        }\n      },\n      onClick: () => onMarkerClick(station),\n      children: state.selectedStation && state.selectedStation.name === station.name ? /*#__PURE__*/_jsxDEV(MapInfoWindow, {\n        position: {\n          lat: station.latitude,\n          lng: station.longitude\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: '15px',\n            border: '1px solid #ccc',\n            borderRadius: '5px',\n            backgroundColor: '#fff',\n            width: '200px',\n            fontSize: '12px',\n            textAlign: 'center',\n            position: 'relative' // 추가\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'absolute',\n              top: '5px',\n              right: '5px',\n              cursor: 'pointer'\n            },\n            onClick: closeInfoWindow,\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this) : null\n    }, station.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(GasStation, \"+zXlwemAFx+qwh4irmfpaEDm60c=\");\n_c = GasStation;\nexport default GasStation;\nvar _c;\n$RefreshReg$(_c, \"GasStation\");","map":{"version":3,"names":["React","useState","useEffect","axios","Map","MapMarker","MapInfoWindow","jsxDEV","_jsxDEV","GasStation","_s","state","setState","center","lat","lng","stations","errMsg","isLoading","selectedStation","fetchStations","position","latitude","longitude","coords","post","then","response","prev","data","catch","error","navigator","geolocation","getCurrentPosition","err","message","onMarkerClick","station","closeInfoWindow","style","width","height","level","children","fileName","_jsxFileName","lineNumber","columnNumber","map","image","src","size","onClick","name","padding","border","borderRadius","backgroundColor","fontSize","textAlign","top","right","cursor","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/gas_station.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Map, MapMarker, MapInfoWindow } from \"react-kakao-maps-sdk\";\r\n\r\nfunction GasStation() {\r\n    const [state, setState] = useState({\r\n        center: { lat: 33.450701, lng: 126.570667 },\r\n        stations: [],\r\n        errMsg: null,\r\n        isLoading: true,\r\n        selectedStation: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchStations = (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n            axios.post('http://localhost:5000/get-stations', { latitude, longitude })\r\n                .then(response => {\r\n                    setState(prev => ({\r\n                        ...prev,\r\n                        center: { lat: latitude, lng: longitude },\r\n                        stations: response.data,\r\n                        isLoading: false\r\n                    }));\r\n                })\r\n                .catch(error => {\r\n                    setState(prev => ({\r\n                        ...prev,\r\n                        errMsg: '주유소 정보를 가져오는데 실패했습니다.',\r\n                        isLoading: false\r\n                    }));\r\n                });\r\n        };\r\n\r\n        navigator.geolocation.getCurrentPosition(fetchStations, (err) => {\r\n            setState(prev => ({ ...prev, errMsg: err.message, isLoading: false }));\r\n        });\r\n    }, []);\r\n\r\n    const onMarkerClick = (station) => {\r\n        setState(prev => ({ ...prev, selectedStation: station }));\r\n    };\r\n\r\n    const closeInfoWindow = () => {\r\n        setState(prev => ({ ...prev, selectedStation: null }));\r\n    };\r\n\r\n    return (\r\n        <Map center={state.center} style={{ width: \"100%\", height: \"100%\" }} level={3}>\r\n            <MapMarker position={state.center} /> {/* 사용자 위치 마커 */}\r\n            {!state.isLoading && state.stations.map(station => (\r\n                <MapMarker\r\n                    key={station.name}\r\n                    position={{ lat: station.latitude, lng: station.longitude }}\r\n                    image={{\r\n                        src: \"img/fuel.png\",\r\n                        size: { width: 24, height: 35 },\r\n                    }}\r\n                    onClick={() => onMarkerClick(station)}\r\n                >\r\n                    {state.selectedStation && state.selectedStation.name === station.name ? (\r\n                        <MapInfoWindow position={{ lat: station.latitude, lng: station.longitude }}>\r\n                            <div style={{\r\n                                padding: '15px',\r\n                                border: '1px solid #ccc',\r\n                                borderRadius: '5px',\r\n                                backgroundColor: '#fff',\r\n                                width: '200px',\r\n                                fontSize: '12px',\r\n                                textAlign: 'center',\r\n                                position: 'relative' // 추가\r\n                            }}>\r\n                                <div style={{ position: 'absolute', top: '5px', right: '5px', cursor: 'pointer' }}\r\n                                     onClick={closeInfoWindow}>\r\n                                    X\r\n                                </div>\r\n                                {/* 기타 정보와 스타일링 */}\r\n                            </div>\r\n                        </MapInfoWindow>\r\n                    ) : null}\r\n                </MapMarker>\r\n            ))}\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default GasStation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}