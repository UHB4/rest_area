{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\my_location.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Map, MapMarker, CustomOverlayMap } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction My_Location() {\n  _s();\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    locations: [],\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const newPos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setState(prev => ({\n          ...prev,\n          center: newPos,\n          isLoading: false\n        }));\n        fetchStations(newPos.lat, newPos.lng);\n      }, err => {\n        setState(prev => ({\n          ...prev,\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      setState(prev => ({\n        ...prev,\n        errMsg: \"Geolocation을 사용할 수 없어요.\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  const fetchStations = (latitude, longitude) => {\n    axios.post('http://localhost:5000/find-stations', {\n      latitude,\n      longitude\n    }).then(response => {\n      setState(prev => ({\n        ...prev,\n        locations: response.data.dbData,\n        isLoading: false\n      }));\n    }).catch(error => {\n      console.error('Error fetching stations:', error);\n      setState(prev => ({\n        ...prev,\n        errMsg: '충전소 정보를 가져오는데 실패했습니다.',\n        isLoading: false\n      }));\n    });\n  };\n  const getMarkerImage = stat => {\n    switch (stat) {\n      case '2':\n        return '/images/green_marker.png';\n      // 충전 대기\n      case '3':\n        return '/images/orange_marker.png';\n      // 충전 중\n      default:\n        return '/images/default_marker.png';\n      // 기타 상태\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      center: state.center,\n      style: {\n        width: \"100%\",\n        height: \"400px\"\n      },\n      level: 3,\n      children: [!state.isLoading && /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: state.center,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"5px\",\n            color: \"#000\"\n          },\n          children: state.errMsg ? state.errMsg : \"현재 위치\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), state.locations.map((loc, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(MapMarker, {\n          position: {\n            lat: loc.lat,\n            lng: loc.lng\n          },\n          image: {\n            src: getMarkerImage(loc.stat),\n            // 충전소 상태에 따른 마커 이미지\n            size: {\n              width: 50,\n              height: 50\n            }\n          },\n          onClick: () => alert(`충전소: ${loc.statNm}\\n주소: ${loc.addr}\\n상태: ${loc.stat}`),\n          children: /*#__PURE__*/_jsxDEV(CustomOverlayMap, {\n            position: {\n              lat: loc.lat,\n              lng: loc.lng\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"5px\",\n                background: \"#fff\",\n                border: \"1px solid black\",\n                borderRadius: \"4px\",\n                fontSize: \"12px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: loc.statNm\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 66\n              }, this), loc.addr, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 47\n              }, this), \"Distance: \", loc.distance.toFixed(2), \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(My_Location, \"jhgkncxZ4rZ9QLcyD0S3cJxYIC0=\");\n_c = My_Location;\nexport default My_Location;\nvar _c;\n$RefreshReg$(_c, \"My_Location\");","map":{"version":3,"names":["React","useState","useEffect","axios","Map","MapMarker","CustomOverlayMap","jsxDEV","_jsxDEV","Fragment","_Fragment","My_Location","_s","state","setState","center","lat","lng","locations","errMsg","isLoading","navigator","geolocation","getCurrentPosition","position","newPos","coords","latitude","longitude","prev","fetchStations","err","message","post","then","response","data","dbData","catch","error","console","getMarkerImage","stat","children","style","width","height","level","padding","color","fileName","_jsxFileName","lineNumber","columnNumber","map","loc","index","image","src","size","onClick","alert","statNm","addr","background","border","borderRadius","fontSize","distance","toFixed","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/my_location.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Map, MapMarker, CustomOverlayMap } from \"react-kakao-maps-sdk\";\r\n\r\nfunction My_Location() {\r\n    const [state, setState] = useState({\r\n        center: {\r\n            lat: 33.450701,\r\n            lng: 126.570667,\r\n        },\r\n        locations: [],\r\n        errMsg: null,\r\n        isLoading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    const newPos = { lat: position.coords.latitude, lng: position.coords.longitude };\r\n                    setState(prev => ({ ...prev, center: newPos, isLoading: false }));\r\n                    fetchStations(newPos.lat, newPos.lng);\r\n                },\r\n                (err) => {\r\n                    setState(prev => ({ ...prev, errMsg: err.message, isLoading: false }));\r\n                }\r\n            );\r\n        } else {\r\n            setState(prev => ({ ...prev, errMsg: \"Geolocation을 사용할 수 없어요.\", isLoading: false }));\r\n        }\r\n    }, []);\r\n\r\n    const fetchStations = (latitude, longitude) => {\r\n        axios.post('http://localhost:5000/find-stations', { latitude, longitude })\r\n            .then(response => {\r\n                setState(prev => ({ ...prev, locations: response.data.dbData, isLoading: false }));\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching stations:', error);\r\n                setState(prev => ({ ...prev, errMsg: '충전소 정보를 가져오는데 실패했습니다.', isLoading: false }));\r\n            });\r\n    };\r\n\r\n    const getMarkerImage = (stat) => {\r\n        switch (stat) {\r\n            case '2': return '/images/green_marker.png'; // 충전 대기\r\n            case '3': return '/images/orange_marker.png'; // 충전 중\r\n            default: return '/images/default_marker.png'; // 기타 상태\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Map center={state.center} style={{ width: \"100%\", height: \"400px\" }} level={3}>\r\n                {!state.isLoading && (\r\n                    <MapMarker position={state.center}>\r\n                        <div style={{ padding: \"5px\", color: \"#000\" }}>\r\n                            {state.errMsg ? state.errMsg : \"현재 위치\"}\r\n                        </div>\r\n                    </MapMarker>\r\n                )}\r\n                {state.locations.map((loc, index) => (\r\n                    <React.Fragment key={index}>\r\n                        <MapMarker\r\n                            position={{ lat: loc.lat, lng: loc.lng }}\r\n                            image={{\r\n                                src: getMarkerImage(loc.stat), // 충전소 상태에 따른 마커 이미지\r\n                                size: { width: 50, height: 50 },\r\n                            }}\r\n                            onClick={() => alert(`충전소: ${loc.statNm}\\n주소: ${loc.addr}\\n상태: ${loc.stat}`)}\r\n                        >\r\n                            <CustomOverlayMap position={{ lat: loc.lat, lng: loc.lng }}>\r\n                                <div style={{ padding: \"5px\", background: \"#fff\", border: \"1px solid black\", borderRadius: \"4px\", fontSize: \"12px\" }}>\r\n                                    <strong>{loc.statNm}</strong><br />\r\n                                    {loc.addr}<br />\r\n                                    Distance: {loc.distance.toFixed(2)} km\r\n                                </div>\r\n                            </CustomOverlayMap>\r\n                        </MapMarker>\r\n                    </React.Fragment>\r\n                ))}\r\n            </Map>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default My_Location;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}