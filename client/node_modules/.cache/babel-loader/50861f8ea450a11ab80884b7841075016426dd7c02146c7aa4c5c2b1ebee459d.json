{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\gas_station.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Gas_station() {\n  _s();\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    stations: [],\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    const fetchStations = position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      axios.post('http://localhost:5000/get-stations', {\n        latitude,\n        longitude\n      }).then(response => {\n        console.log('Gas stations fetched:', response.data);\n        setState(prev => ({\n          ...prev,\n          center: {\n            lat: latitude,\n            lng: longitude\n          },\n          stations: response.data,\n          isLoading: false\n        }));\n      }).catch(error => {\n        console.error('Failed to fetch gas stations:', error);\n        setState(prev => ({\n          ...prev,\n          errMsg: '주유소 정보를 가져오는데 실패했습니다.',\n          isLoading: false\n        }));\n      });\n    };\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(fetchStations, err => {\n        console.error(\"Geolocation error:\", err.message);\n        setState(prev => ({\n          ...prev,\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      setState(prev => ({\n        ...prev,\n        errMsg: \"Geolocation을 사용할 수 없어요.\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Map, {\n    center: state.center,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    level: 3,\n    children: !state.isLoading && state.stations.map(station => /*#__PURE__*/_jsxDEV(MapMarker, {\n      position: {\n        lat: station.latitude,\n        lng: station.longitude\n      }\n    }, station.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(Gas_station, \"fj4ECsHV5WIYL6IvijnJXL93uyw=\");\n_c = Gas_station;\nexport default Gas_station;\nvar _c;\n$RefreshReg$(_c, \"Gas_station\");","map":{"version":3,"names":["React","useState","useEffect","axios","Map","MapMarker","jsxDEV","_jsxDEV","Gas_station","_s","state","setState","center","lat","lng","stations","errMsg","isLoading","fetchStations","position","latitude","longitude","coords","post","then","response","console","log","data","prev","catch","error","navigator","geolocation","getCurrentPosition","err","message","style","width","height","level","children","map","station","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/gas_station.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\r\n\r\nfunction Gas_station() {\r\n    const [state, setState] = useState({\r\n        center: { lat: 33.450701, lng: 126.570667 },\r\n        stations: [],\r\n        errMsg: null,\r\n        isLoading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchStations = (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n            axios.post('http://localhost:5000/get-stations', { latitude, longitude })\r\n                .then(response => {\r\n                    console.log('Gas stations fetched:', response.data);\r\n                    setState(prev => ({\r\n                        ...prev,\r\n                        center: { lat: latitude, lng: longitude },\r\n                        stations: response.data,\r\n                        isLoading: false\r\n                    }));\r\n                })\r\n                .catch(error => {\r\n                    console.error('Failed to fetch gas stations:', error);\r\n                    setState(prev => ({\r\n                        ...prev,\r\n                        errMsg: '주유소 정보를 가져오는데 실패했습니다.',\r\n                        isLoading: false\r\n                    }));\r\n                });\r\n        };\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                fetchStations,\r\n                (err) => {\r\n                    console.error(\"Geolocation error:\", err.message);\r\n                    setState(prev => ({ ...prev, errMsg: err.message, isLoading: false }));\r\n                }\r\n            );\r\n        } else {\r\n            setState(prev => ({ ...prev, errMsg: \"Geolocation을 사용할 수 없어요.\", isLoading: false }));\r\n        }\r\n    }, []);    return (\r\n        <Map center={state.center} style={{ width: \"100%\", height: \"100%\" }} level={3}>\r\n            {!state.isLoading && state.stations.map(station => (\r\n                <MapMarker key={station.name} position={{ lat: station.latitude, lng: station.longitude }} />\r\n            ))}\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default Gas_station;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}