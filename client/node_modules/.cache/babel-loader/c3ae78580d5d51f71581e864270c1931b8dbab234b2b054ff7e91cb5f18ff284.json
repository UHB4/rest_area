{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\Project\\\\2_WebProject\\\\3_React\\\\blog\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  /*\n  기존 변수를 사용한 방식\n  let post='강남 우동 맛집'\n  *State 를 사용한 방식\n  - 사용방법\n  1. import {useState} from \"react\";\n  2. let [state명, state 변경을 도와주는 함수명] = userState('[보관할 자료]')\n  state 변경을 도와주는 함수명은 추후에 알아보자.\n   State를 변경하게 되면 State 변경 함수와 함께\n  HTML 화면갱신이 일어나도록 설계가 되어있다.\n  결론] 동적으로 자주 변경 될 것같은 HTML 요소는 State로 만들자!\n  */\n\n  // let [post,postChange] = useState('명동 우동 맛집')\n  // 상태 변경 함수를 사용하지 않으면 생략도 가능하다.\n  let [post] = useState('명동 우동 맛집');\n  return (\n    /*#__PURE__*/\n    // JSX(JavaScript XML)란? 리액트에서 UI를 쉽고 빠르게 작성하기위한 문법\n    // JSX문법1] class 는 className으로\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"black-nav\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uBE14\\uB85C\\uADF8\\uC784\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color: 'red',\n          fontSize: '16px'\n        },\n        children: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(App, \"lcYxgaGhIC/c/qIm8A3v0aKOcsA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","_c","$RefreshReg$"],"sources":["C:/UHB/Project/2_WebProject/3_React/blog/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n\nfunction App() {\n    /*\n    기존 변수를 사용한 방식\n    let post='강남 우동 맛집'\n    *State 를 사용한 방식\n    - 사용방법\n    1. import {useState} from \"react\";\n    2. let [state명, state 변경을 도와주는 함수명] = userState('[보관할 자료]')\n    state 변경을 도와주는 함수명은 추후에 알아보자.\n\n    State를 변경하게 되면 State 변경 함수와 함께\n    HTML 화면갱신이 일어나도록 설계가 되어있다.\n    결론] 동적으로 자주 변경 될 것같은 HTML 요소는 State로 만들자!\n*/\n\n    // let [post,postChange] = useState('명동 우동 맛집')\n    // 상태 변경 함수를 사용하지 않으면 생략도 가능하다.\n    let [post] = useState('명동 우동 맛집')\n    return (\n        // JSX(JavaScript XML)란? 리액트에서 UI를 쉽고 빠르게 작성하기위한 문법\n        // JSX문법1] class 는 className으로\n        <div className=\"App\">\n            <div className=\"black-nav\">\n                <h4>\n                    블로그임\n                </h4>\n            </div>\n            {/* JSX문법3]\n        - 인라인 속성을 적용할 때에는 {{}} 이 구조를 활용한다.\n        - 스타일의 속성을 객체로 표현한다.\n        - 속성명에 '-' (하이픈) 이 들어갈 경우에는 카멜표기법으로\n         명시한다.\n         ex) font-size => fontSize\n        */}\n            <h4 style={{color: 'red', fontSize: '16px'}}>\n                {/*JSX문법2] 치환할 값은 {} 활용*/}\n                {post}\n            </h4>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAAQA,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGI;EACA;EACA,IAAI,CAACC,IAAI,CAAC,GAAGL,QAAQ,CAAC,UAAU,CAAC;EACjC;IAAA;IACI;IACA;IACAE,OAAA;MAAKI,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAChBL,OAAA;QAAKI,SAAS,EAAC,WAAW;QAAAC,QAAA,eACtBL,OAAA;UAAAK,QAAA,EAAI;QAEJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eAQNT,OAAA;QAAIU,KAAK,EAAE;UAACC,KAAK,EAAE,KAAK;UAAEC,QAAQ,EAAE;QAAM,CAAE;QAAAP,QAAA,EAEvCF;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;AAEd;AAACP,EAAA,CAxCQD,GAAG;AAAAY,EAAA,GAAHZ,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}