{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{ArcElement,Chart as ChartJS,Legend,Tooltip}from\"chart.js\";import{Doughnut}from\"react-chartjs-2\";import{useNavigate}from'react-router-dom';import styles from'./Chart.css';import{jsx as _jsx}from\"react/jsx-runtime\";const LocationTracker=()=>{const[stations,setStations]=useState([]);useEffect(()=>{navigator.geolocation.getCurrentPosition(position=>{const{latitude,longitude}=position.coords;axios.post('http://localhost:5000/location',{latitude,longitude}).then(response=>{setStations(response.data.stations);// 충전소 정보 상태 업데이트\n}).catch(error=>{console.error('에러 :',error);});},error=>{console.error(error.message);},{enableHighAccuracy:true,timeout:5000,maximumAge:0});},[]);return/*#__PURE__*/_jsx(ChartDonut,{stations:stations.map(station=>station[\"Station Name\"])});};function ChartDonut(props){const{stations}=props;ChartJS.register(ArcElement,Tooltip,Legend);const[chartData,setChartData]=useState({labels:[],datasets:[{label:'충전 가능 슬롯 수',data:[],backgroundColor:[],borderWidth:1,borderColor:[]}]});useEffect(()=>{let labels=stations;const EmptyParkingLot=labels.map(()=>Math.floor(Math.random()*3));const backgroundColors=labels.map((_,index)=>\"hsl(\".concat(200+index*30,\", 90%, \").concat(90-index*5,\"%)\"));const borderColors=labels.map((_,index)=>\"hsl(\".concat(200+index*30,\", 100%, \").concat(80-index*5,\"%)\"));// 채도와 밝기를 조금 조정\nsetChartData({labels:labels,datasets:[{data:EmptyParkingLot,backgroundColor:backgroundColors,borderColor:borderColors}]});},[stations]);const legendTitle={display:true,text:'내 주변 전기차 충전 가능 한 곳',font:{size:16,// 폰트 크기 설정\nweight:'bold'// 폰트 굵기 설정\n}};const navigate=useNavigate();const handleChartClick=(event,elements)=>{if(!elements||elements.length===0){return;}if(elements.length>0){// const clickedElementIndex = elements[0]._index;\n// const clickedData = chartData.labels[clickedElementIndex];\nnavigate(\"/map\");}};const options={plugins:{tooltip:{enabled:true,bodyFont:{size:15},callbacks:{beforeBody:function(){return'빈 슬롯 수';// 툴팁 본문 전에 표시될 텍스트\n}}},// labels:{   padding: 20},\nlegend:{position:'top',title:legendTitle// 범례 제목 적용\n}},onClick:handleChartClick};useEffect(()=>{const interval=setInterval(()=>{setChartData(prevChartData=>{const newData=prevChartData.datasets[0].data.map(value=>{// 이전 데이터 값에 약간의 변화를 줌 (-2부터 2까지 랜덤한 값)\nlet newValue=value+Math.floor(Math.random()*5)-2;// -2, -1, 0, 1, 2 중에서 랜덤으로 선택\nnewValue=Math.min(Math.max(newValue,0),7);// 값이 0보다 작으면 0으로, 10보다 크면 10으로 설정\nreturn newValue;});return{...prevChartData,datasets:[{...prevChartData.datasets[0],data:newData}]};});},10000);return()=>clearInterval(interval);// 컴포넌트가 소멸될 때 해당 인터벌을 정리\n},[]);return/*#__PURE__*/_jsx(\"div\",{className:styles.Chart,children:/*#__PURE__*/_jsx(\"div\",{style:{width:'100%',maxWidth:'400px',margin:'auto'},children:/*#__PURE__*/_jsx(Doughnut,{data:chartData,options:options,width:400,height:460})})});}export default LocationTracker;","map":{"version":3,"names":["React","useState","useEffect","axios","ArcElement","Chart","ChartJS","Legend","Tooltip","Doughnut","useNavigate","styles","jsx","_jsx","LocationTracker","stations","setStations","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","post","then","response","data","catch","error","console","message","enableHighAccuracy","timeout","maximumAge","ChartDonut","map","station","props","register","chartData","setChartData","labels","datasets","label","backgroundColor","borderWidth","borderColor","EmptyParkingLot","Math","floor","random","backgroundColors","_","index","concat","borderColors","legendTitle","display","text","font","size","weight","navigate","handleChartClick","event","elements","length","options","plugins","tooltip","enabled","bodyFont","callbacks","beforeBody","legend","title","onClick","interval","setInterval","prevChartData","newData","value","newValue","min","max","clearInterval","className","children","style","width","maxWidth","margin","height"],"sources":["C:/UHB/rest_area/src/routes/Chart/EVChargingSlots.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ArcElement, Chart as ChartJS, Legend, Tooltip } from \"chart.js\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styles from './Chart.css'\r\nconst LocationTracker = () => {\r\n    const [stations, setStations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const { latitude, longitude } = position.coords;\r\n            axios.post('http://localhost:5000/location', { latitude, longitude })\r\n                .then(response => {\r\n                    setStations(response.data.stations); // 충전소 정보 상태 업데이트\r\n                })\r\n                .catch(error => {\r\n                    console.error('에러 :', error);\r\n                });\r\n        }, error => {\r\n            console.error(error.message);\r\n        }, {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <ChartDonut stations={stations.map(station => station[\"Station Name\"])} />\r\n    );\r\n};\r\n\r\nfunction ChartDonut(props) {\r\n    const { stations } = props;\r\n\r\n    ChartJS.register(ArcElement, Tooltip, Legend);\r\n    const [chartData, setChartData] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: '충전 가능 슬롯 수',\r\n                data: [],\r\n                backgroundColor: [],\r\n                borderWidth: 1,\r\n                borderColor: []\r\n            }\r\n        ],\r\n    });\r\n\r\n    useEffect(() => {\r\n        let labels = stations;\r\n        const EmptyParkingLot = labels.map(() => Math.floor(Math.random() * 3));\r\n        const backgroundColors = labels.map((_, index) => `hsl(${200 + index * 30}, 90%, ${90 - index * 5}%)`);\r\n        const borderColors = labels.map((_, index) => `hsl(${200 + index * 30}, 100%, ${80 - index * 5}%)`); // 채도와 밝기를 조금 조정\r\n\r\n\r\n        setChartData({\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    data: EmptyParkingLot,\r\n                    backgroundColor: backgroundColors,\r\n                    borderColor:borderColors,\r\n                }\r\n            ],\r\n        });\r\n    }, [stations]);\r\n\r\n    const legendTitle = {\r\n        display: true,\r\n        text: '내 주변 전기차 충전 가능 한 곳',\r\n        font: {\r\n            size: 16, // 폰트 크기 설정\r\n            weight: 'bold', // 폰트 굵기 설정\r\n        }\r\n\r\n    };\r\n    const navigate = useNavigate();\r\n    const handleChartClick = (event, elements) => {\r\n        if (!elements || elements.length === 0) {\r\n            return;\r\n        }\r\n        if (elements.length > 0) {\r\n            // const clickedElementIndex = elements[0]._index;\r\n            // const clickedData = chartData.labels[clickedElementIndex];\r\n            navigate(`/map`);\r\n        }\r\n    };\r\n    const options = {\r\n        plugins: {\r\n            tooltip: {\r\n                enabled: true,\r\n                bodyFont: {\r\n                    size: 15,\r\n                },\r\n                callbacks: {\r\n                    beforeBody: function() {\r\n                        return '빈 슬롯 수'; // 툴팁 본문 전에 표시될 텍스트\r\n                    }\r\n                }\r\n            },\r\n            // labels:{   padding: 20},\r\n            legend: {\r\n\r\n                position: 'top',\r\n                title: legendTitle // 범례 제목 적용\r\n            },\r\n        },\r\n        onClick: handleChartClick\r\n    };\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setChartData((prevChartData) => {\r\n                const newData = prevChartData.datasets[0].data.map((value) => {\r\n                    // 이전 데이터 값에 약간의 변화를 줌 (-2부터 2까지 랜덤한 값)\r\n                    let newValue = value + Math.floor(Math.random() * 5) - 2; // -2, -1, 0, 1, 2 중에서 랜덤으로 선택\r\n                    newValue = Math.min(Math.max(newValue, 0), 7); // 값이 0보다 작으면 0으로, 10보다 크면 10으로 설정\r\n                    return newValue;\r\n                });\r\n                return {\r\n                    ...prevChartData,\r\n                    datasets: [\r\n                        {\r\n                            ...prevChartData.datasets[0],\r\n                            data: newData,\r\n                        }\r\n                    ]\r\n                };\r\n            });\r\n        }, 10000);\r\n\r\n        return () => clearInterval(interval); // 컴포넌트가 소멸될 때 해당 인터벌을 정리\r\n    }, []);\r\n    return (\r\n        <div className={styles.Chart}>\r\n            <div style={{width: '100%', maxWidth: '400px', margin: 'auto'}}>\r\n                <Doughnut data={chartData} options={options} width={400} height={460}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LocationTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}