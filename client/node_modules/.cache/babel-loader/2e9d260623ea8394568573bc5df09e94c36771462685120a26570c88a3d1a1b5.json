{"ast":null,"code":"var _jsxFileName = \"C:\\\\UHB\\\\rest_area\\\\src\\\\kako_map\\\\gas_station.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Gas_station() {\n  _s();\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    stations: [],\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const newPos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        console.log(\"New position:\", newPos);\n        setState(prev => ({\n          ...prev,\n          center: newPos,\n          isLoading: false\n        }));\n        fetchGasStationInfo(newPos.lat, newPos.lng);\n      }, err => {\n        console.error(\"Geolocation error:\", err.message);\n        setState(prev => ({\n          ...prev,\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      setState(prev => ({\n        ...prev,\n        errMsg: \"Geolocation을 사용할 수 없어요.\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  const fetchGasStationInfo = (latitude, longitude) => {\n    console.log(\"Fetching gas stations with:\", {\n      latitude,\n      longitude\n    });\n    axios.post('http://localhost:5000/get-stations', {\n      latitude,\n      longitude\n    }).then(response => {\n      console.log('Gas stations fetched:', response.data);\n      setState(prev => ({\n        ...prev,\n        stations: response.data,\n        isLoading: false\n      }));\n    }).catch(error => {\n      console.error('Failed to fetch gas stations:', error);\n      setState(prev => ({\n        ...prev,\n        errMsg: '주유소 정보를 가져오는데 실패했습니다.',\n        isLoading: false\n      }));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Map, {\n    center: state.center,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    level: 3,\n    children: !state.isLoading && state.stations.map(station => /*#__PURE__*/_jsxDEV(MapMarker, {\n      position: {\n        lat: station.latitude,\n        lng: station.longitude\n      }\n    }, station.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(Gas_station, \"fj4ECsHV5WIYL6IvijnJXL93uyw=\");\n_c = Gas_station;\nexport default Gas_station;\nvar _c;\n$RefreshReg$(_c, \"Gas_station\");","map":{"version":3,"names":["React","useState","useEffect","axios","Map","MapMarker","jsxDEV","_jsxDEV","Gas_station","_s","state","setState","center","lat","lng","stations","errMsg","isLoading","navigator","geolocation","getCurrentPosition","position","newPos","coords","latitude","longitude","console","log","prev","fetchGasStationInfo","err","error","message","post","then","response","data","catch","style","width","height","level","children","map","station","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UHB/rest_area/src/kako_map/gas_station.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\r\n\r\nfunction Gas_station() {\r\n    const [state, setState] = useState({\r\n        center: { lat: 33.450701, lng: 126.570667 },\r\n        stations: [],\r\n        errMsg: null,\r\n        isLoading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    const newPos = { lat: position.coords.latitude, lng: position.coords.longitude };\r\n                    console.log(\"New position:\", newPos);\r\n                    setState(prev => ({ ...prev, center: newPos, isLoading: false }));\r\n                    fetchGasStationInfo(newPos.lat, newPos.lng);\r\n                },\r\n                (err) => {\r\n                    console.error(\"Geolocation error:\", err.message);\r\n                    setState(prev => ({ ...prev, errMsg: err.message, isLoading: false }));\r\n                }\r\n            );\r\n        } else {\r\n            setState(prev => ({ ...prev, errMsg: \"Geolocation을 사용할 수 없어요.\", isLoading: false }));\r\n        }\r\n    }, []);\r\n\r\n    const fetchGasStationInfo = (latitude, longitude) => {\r\n        console.log(\"Fetching gas stations with:\", { latitude, longitude });\r\n        axios.post('http://localhost:5000/get-stations', { latitude, longitude })\r\n            .then(response => {\r\n                console.log('Gas stations fetched:', response.data);\r\n                setState(prev => ({ ...prev, stations: response.data, isLoading: false }));\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to fetch gas stations:', error);\r\n                setState(prev => ({ ...prev, errMsg: '주유소 정보를 가져오는데 실패했습니다.', isLoading: false }));\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Map center={state.center} style={{ width: \"100%\", height: \"100%\" }} level={3}>\r\n            {!state.isLoading && state.stations.map(station => (\r\n                <MapMarker key={station.name} position={{ lat: station.latitude, lng: station.longitude }} />\r\n            ))}\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default Gas_station;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}